@using ISP_ManagementSystemModel
@model IEnumerable<ISP_ManagementSystemModel.Models.CustomStockListSectionInformation>

<style>
    .customDTWidth {
        padding: 0px;
    }

    input,
    select,
    textarea {
        max-width: 100%;
    }

    .btn-sm {
        padding: 3px 6px;
    }
</style>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    string Date = AppUtils.GetDateTimeNow().ToString("yyyy-MMM");

    @Html.AntiForgeryToken()

    <div class="panel panel-default" hidden>
        <div class="panel-heading" style="height:45px;">
            <section class="content-header" style="padding: 5px 10px 0px 15px;">
                <h6 class="panel-title">Search By</h6>
                <ol class="breadcrumb" style="padding: 0px 5px;     top: 5px;">
                    <li class="active"><a href="/Stock/AddStock"><i class="fa fa-dashboard"></i> Add Item</a></li>
                </ol>
            </section>
        </div>

        <div class="panel-body">
            <div class="form-group col-sm-12">
                <div class="form-group col-sm-7">
                    @Html.Label("Item Name", null, new { @class = "control-label col-md-2", Style = "float:left" })
                    <div class="col-md-7" style="padding-left: 0px; float: left">
                        @Html.DropDownList("CableTypeID", null, "-- Select Cable Type --", new { @class = "form-control input-sm col-sm-11", @placeholder = " Select Cable Type  " })
                    </div>
                    <div class="col-md-2" style="padding-left: 0px; float: left; margin-left: 20px;">
                        <input type="button" id="btnSearchItem" class="btn btn-sm btn-primary" value="Search" />
                    </div>
                    <div class="col-md-3"></div>
                </div>
                @*<div class="form-group col-sm-4">
                        <div id="ShowCountLabel" class="col-md-4" style="padding-left: 0px;" hidden="">
                            @Html.Label("Total Item", new { @class = "control-label col-md-0", Style = "float:left" })
                        </div>
                        <div class="col-md-6" style="padding-left: 0px;">
                            <div id="TotalItem"></div>
                        </div>
                    </div>*@
            </div>
        </div>

        <div style="float: right; padding-bottom:0px; margin-top: 30px; margin-right: 15px;">
            <input type="button" id="btnExportExcel" class="btn btn-sm btn-primary  btn-sm" value="Export Excel">
            <!-- export xl file -->
            @*<a class="btn btn-sm btn-primary" href="#">Export Excel</a>*@
        </div>
    </div>

    <div class="panel panel-default" style="margin-bottom: 0px">
        <div class="panel-heading">
            <h4 class="panel-title">Cable Summary List</h4> @*@Date*@

        </div>

        <div class="panel-body" style="overflow:auto">
            <table id="tblTotalList" class="table table-bordered table-hover table-responsive table-striped" style="align-content: center; width: 100%">
                <thead>
                    <tr>
                        <th style="padding:0px;" hidden="hidden"></th>
                        <th style="padding:10px;">Cable Type Name</th>
                        <th> Total </th>
                    </tr>
                </thead>
            </table>
        </div>

        <div id="divCableList" hidden>

            <div class="panel panel-default" style="margin-bottom: 0px">
                <div class="panel-heading">
                    <h4 class="panel-title">Cable Details List</h4> @*@Date*@

                </div>

                <div class="panel-body" style="overflow:auto">
                    <table id="tblCableList" class="table table-bordered table-hover table-responsive table-striped" style="align-content: center; width: 100%">
                        <thead>
                            <tr>
                                <th hidden>

                                </th>
                                <th>
                                    @Html.DisplayName(" Cable Type")
                                </th>
                                <th>
                                    @Html.DisplayName(" Box/Drum ")
                                </th>
                                <th>
                                    @Html.DisplayName(" Reading From")
                                </th>
                                <th>
                                    @Html.DisplayName(" Reading End ")
                                </th>
                                <th>
                                    @Html.DisplayName(" Quantity(M) ")
                                </th>
                                <th>
                                    @Html.DisplayName(" Used(M) ")
                                </th>
                                <th>
                                    @Html.DisplayName(" Remain(M) ")
                                </th>
                                <th>
                                    @Html.DisplayName(" Brand ")
                                </th>
                                <th>
                                    @Html.DisplayName(" Supplier ")
                                </th>
                                <th>
                                    @Html.DisplayName(" Invoice ")
                                </th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>

        </div>




        <div class="modal fade" id="mdlShowCableDistributionDetailsByDrumBoxID" role="dialog" style="overflow: hidden; overflow-y: scroll;" data-backdrop="static" data-keyboard="false">
            <div class="modal-dialog modal-lg" style="width: 85%;margin-bottom:5px;">
                <div class="modal-content">
                    <div class="modal-header">
                        <button id="closemdlShowCableDistributionDetailsByDrumBoxID" type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Cable Distribution Details By Drum/Box Name</h4>
                    </div>
                    <div class="modal-body panel-body">

                        <table id="tblCableAssignedList" class="table table-bordered table-hover table-responsive table-striped" style="width: 100%">
                            <thead>
                                <tr>
                                    <th style="" hidden="hidden"></th>
                                    @*cable distribution ID*@
                                    <th style="">Cable Type</th>
                                    <th style=""> Box/Drum Name</th>
                                    <th style=""> Quantity</th>
                                    <th style="width: auto"> Date</th>
                                    <th>Client Name</th>
                                    <th>Status Activate Date</th>
                                    <th>Assigned Employee</th>
                                    <th> Cable For Employee </th>
                                    <th>Cable Status</th>
                                    <th style="text-align: center; width: 5%">Action</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                    <div class="modal-footer">
                        @*<button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>*@
                        <div id="PopUp" style="float: right">
                            <input type="button" id="btnShowCableDistributionDetailsByDrumBoxIDClose" value="Close" class="btn btn-default btn-sm" />
                        </div>
                    </div>
                </div>
            </div>
        </div>


        @if (ISP_ManagementSystemModel.AppUtils.HasAccessInTheList(ISP_ManagementSystemModel.AppUtils.Change_Cable_Status_To_Other_Such_New_Or_Old_Box_Or_Dead))
        {
            <div class="modal fade" id="mdlPopUp_Specific_Cable_Details" role="dialog" style="overflow:auto" data-backdrop="static" data-keyboard="false">
                <div class="modal-dialog modal-lg" style="width:45%">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button id="btnPopUpUpdateSectionAndProductStatus" type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">Change Section And Product Status </h4>
                        </div>
                        <div class="modal-body panel-body">
                            @Html.Partial("Partial_Specific_Cable_Details")
                        </div>
                        <div class="modal-footer">
                            <div id="PopUp" style="float:right">
                                <input type="button" id="btnPopUpSpecificCableDetailsClose" value="Close" class="btn btn-default btn-sm" />
                                <input type="button" id="btnUpdateCableStatus" value="Update Cable Status" class="btn btn-primary btn-sm" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }


        <div class="modal fade" id="tblEmployeeDetails" role="dialog" style="overflow: hidden; overflow-y: scroll;" data-backdrop="static" data-keyboard="false">
            <div class="modal-dialog modal-lg" style="width: 65%;margin-bottom:5px;">
                <div class="modal-content">
                    <div class="modal-header">
                        <button id="closeTblEmployeeDetails" type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Update Client Information</h4>
                    </div>
                    <div class="modal-body panel-body">
                        @Html.Partial("Partial_SpecificCLientDetails")
                    </div>
                    @if ((bool)HttpContext.Current.Session["MikrotikOptionEnable"])
                    {
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <h6 class="panel-title">Mikrotik</h6>
                            </div>

                            <div class="panel-body">
                                <div class="form-group col-sm-1"></div>
                                <div class="form-group col-sm-6">
                                    <div>
                                        @Html.Label("MIkrotik", new { @class = "control-label col-md-0", Style = "float:left" })
                                        <span class="required_field col-md-0" style="padding-left: 5px"> *</span>
                                    </div>
                                    <div style="clear: both"> </div>
                                    <div class="col-md-11" style="padding-left: 0px;">
                                        @Html.DropDownList("lstMikrotik", null, "--Select Mikrotik--", new { @class = "form-control input-sm col-sm-11", @placeholder = " Select Mikrotik " })
                                    </div>
                                </div>
                                <div class="form-group col-sm-5">
                                    <div>
                                        @Html.Label("IP", new { @class = "control-label col-md-0", Style = "float:left" })
                                        @*<span class="required_field col-md-0" style="padding-left: 5px"> *</span>*@
                                    </div>
                                    <div style="clear: both"> </div>
                                    <div class="col-md-11" style="padding-left: 0px;">
                                        @Html.TextBox("IP", null, new { @class = "form-control input-sm col-sm-11", @placeholder = " 131.33.14.35 " })
                                    </div>
                                </div>
                                <div class="form-group col-sm-1"></div>
                                <div class="form-group col-sm-6">
                                    <div>
                                        @Html.Label("Mac", new { @class = "control-label col-md-0", Style = "float:left" })
                                        @*<span class="required_field col-md-0" style="padding-left: 5px"> *</span>*@
                                    </div>
                                    <div style="clear: both"> </div>
                                    <div class="col-md-11" style="padding-left: 0px;">
                                        @Html.TextBox("Mac", null, new { @class = "form-control input-sm col-sm-11", @placeholder = " 01:1e:ed:34:45:89 " })
                                    </div>
                                </div>
                            </div>

                        </div>
                    }
                    <div class="modal-footer">
                        @*<button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>*@
                        <div id="PopUpClientUpdate" style="float: right">
                            <input type="button" id="btnPopUpClientUpdateClose" value="Close" class="btn btn-default btn-sm" />
                            @if (ISP_ManagementSystemModel.AppUtils.IsGranted(ISP_ManagementSystemModel.AppUtils.Update_Client))
                            {
                                <input type="button" id="btnUpdateClientDetails" value="Update Client Information" class="btn btn-primary btn-sm" />
                            }

                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>
}

<script src="~/Scripts/CustomScripts/CableManager.js"></script>
<script src="~/Scripts/CustomScripts/ProductCurrentStatusManager.js"></script>
<script src="~/Scripts/CustomScripts/ClientUpdataeFromSeveralPageManager.js"></script>
<script src="~/Scripts/CustomScripts/ClientUpdateManager.js"></script>
<script>
    var _cstID = null;
    var T_ID;
    var tableCableDistributionDetailsByDrumOrBoxID = null;
    var tableRowIndexForUpdateClientName;



    var pageID = '@ISP_ManagementSystemModel.AppUtils.CableOverView';

    function GetDetailsByAsserTypeID(id, total) {

        //alert(id);
        $("#divCableList").hide();
        $("#tblCableList>tbody").find("tr").remove();
        if (total > 0) {
            CableManager.ShowCableDetailsByCableTypeIDForDiv(id);
        }
        else {
        }
    }
    function GetCableDistributionDetailsByDrumOrBox(stID) {

        _cstID = stID;
        this.tableCableDistributionDetailsByDrumOrBoxID.draw();
        $("#mdlShowCableDistributionDetailsByDrumBoxID").modal("show");
    }
    function GetClientDetailsByClientDetailsID(clientDetailsID, t_ID) {
        // AppUtil.ShowSuccess(clientDetailsID);
        T_ID = t_ID;
        //ClientUpdataeFromSeveralPageManager.GetClientDetailsByID(clientDetailsID);
        ClientUpdateManager.GetClientDetailsByID(clientDetailsID);
    }
    $(document).ready(function () {

        var table = $("#tblTotalList").DataTable
            ({

                "language":
                    {
                        "processing": "<div class='overlay custom-loader-background'><i class='fa fa-cog fa-spin custom-loader-color'></i></div>"
                    },
                "processing": true,
                "serverSide": true,


                "ajax":
                    {
                        "url": "/ProductCurrentStatus/CustomCableListOverview",
                        "type": "POST",
                        "dataType": "JSON",
                        data: function (d) {
                            d.CableTypeID = $("#CableTypeID").val();
                            d.__RequestVerificationToken = $('[name=__RequestVerificationToken]').val();
                        }
                    },
                //https://stackoverflow.com/questions/11256864/jquery-datatables-actionlink-how-to-add
                "columnDefs": [

                    //{ "width": "5%", "targets": [6] },
                    { "targets": [0], "data": "CableTypeID", "render": function (data, type, row, meta) { return '<td hidden><input type="hidden" id="CableTypeID" name="CableTypeID" value=' + row.CableTypeID + ' /></td>' } },
                    { "targets": [2], "data": "CableTypeID", "render": function (data, type, row, meta) { return '<a href="#" onclick="GetDetailsByAsserTypeID(' + row.CableTypeID + ',' + row.TotalCableTypeCount + ')">' + row.TotalCableTypeCount + '</a>' } },

                ],
                "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                    //console.log(nRow);
                    $(nRow).find("td:eq(0)").attr("hidden", true);

                    return nRow;
                },

                "columns": [
                    {
                        "data": ""
                    },
                    {
                        "data": "CableTypeName"
                    },
                    {
                        "data": "TotalCableTypeCount"
                    }
                ],
                "drawCallback": function (settings) {
                    $("#tblCableList>tbody>tr").remove();
                    $("#divCableList").hide();
                }
            });

        tableCableDistributionDetailsByDrumOrBoxID = $("#tblCableAssignedList").DataTable
            ({
                "language":
                    {
                        "processing": "<div class='overlay custom-loader-background'><i class='fa fa-cog fa-spin custom-loader-color'></i></div>"
                    },
                "processing": true,
                "serverSide": true,
            "deferLoading": 0,

                "ajax":
                    {
                        "url": "/ProductCurrentStatus/CableUsedByCableStockIDOrClientIDInformation",
                        "type": "POST",
                        "dataType": "JSON",
                        data: function (d) {
                            d.CableTypeID = null;
                            d.CableStockID = _cstID;
                            d.ClientDetailsID = null;
                            d.__RequestVerificationToken = $('[name=__RequestVerificationToken]').val();
                        }
                    },
                //https://stackoverflow.com/questions/11256864/jquery-datatables-actionlink-how-to-add
                "columnDefs": [
                    { "targets": [0], "data": "StockDetailsID", "render": function (data, type, row, meta) { return '<td hidden><input type="hidden" id="" name="" value=' + row.CableDistributionID + '></td>' } },
                    { "targets": [4], "data": "StockDetailsID", "render": function (data, type, row, meta) { return AppUtil.ParseDateTime(row.Date) } },
                    { "targets": [5], "data": "ClientName", "render": function (data, type, row, meta) { return row.ClientName !== "" ? "<a href='#' onclick='GetClientDetailsByClientDetailsID(" + row.ClientDetailsID + "," + row.TransactionID + ")'>" + row.ClientName + "</a>" : "" } },

                    { "targets": [6], "orderable": false, "data": "Show", "render": function (data, type, row, meta) { return row.LineStatusActiveDate } },
                    { "targets": [10], "data": "ChangeSectionPermission", "render": function (data, type, row, meta) { return row.ChangeStatus === true ? '  <button type="button" id="btnEdit" class="btn btn-success  btn-sm"><span class="glyphicon glyphicon-edit"></span></button> ' : "" } }

                ],
                "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                    //console.log(nRow);
                    $(nRow).find("td:eq(0)").attr("hidden", true);
                    $(nRow).find("td:eq(5)").css("color", "darkblue");
                    $(nRow).find("td:eq(7)").css("color", "darkblue");
                    $(nRow).find("td:eq(8)").css("color", "darkblue");
                    //$(nRow).find("td:eq(7)").css("padding", "8px 25px");
                    return nRow;
                },

                "columns": [
                    {
                        "data": ""
                    },
                    {
                        "data": "CableTypeName"
                    },
                    {
                        "data": "CableBoxName"
                    },
                    {
                        "data": "AmountOfCableUsed"
                    },
                    {
                        "data": "Date"
                    },
                    {
                        "data": ""
                    },
                    {
                        "data": ""
                    },
                    {
                        "data": "AssignEmployeeName"
                    },
                    {
                        "data": "EmployeeTakenCable"
                    },
                    {
                        "data": "cableStatus"
                    },

                    {
                        "data": ""
                    }
                ]
            });



        $("#btnSearchItem").click(function () {

            if (CableManager.ValidationOnlySearch() === true) {
                //var StockID = $("#StockID").val();
                //CableManager.SearchStockDetailsListByStockIDForTotal(StockID);
                table.draw();
            }

        });


        $("#tblCableAssignedList").on("click", "tr", function (e) {
            //var index = $(this).index();
            //alert("clicked :" + index);
            tableRowIndexForUpdateClientName = $(this).index();
        });

        $("#btnExportExcel").click(function () {
            CableManager.PrintProductListOverView();
        });

        $('#btnShowCableDistributionDetailsByDrumBoxIDClose,#closemdlShowCableDistributionDetailsByDrumBoxID').click(function () {

            $("#tblCableAssignedList>tbody").remove();
            $("#mdlShowCableDistributionDetailsByDrumBoxID").modal("hide");
        });


        $("#tblCableAssignedList").on("click", "#btnEdit", function () {

            _cableDistributionID = $(this).closest("tr").find("td:eq(0) input").val();
            $("#mdlPopUp_Specific_Cable_Details").modal("show");
        });

        $("#btnUpdateCableStatus").click(function () {

            var popRdbCableStatus = $("input[name='chkPassedGroup']:checked").val();
            ProductCurrentStatusManager.ChangeCableStatus(_cableDistributionID, popRdbCableStatus);

        });


        $("#btnPopUpClientUpdateClose").click(function () {
            $("#tblEmployeeDetails").modal("hide");
        });

        $("#btnPopUpSpecificCableDetailsClose").click(function () {
            $("#mdlPopUp_Specific_Cable_Details").modal("hide");
        });

         $("#PopUpClientUpdate").on("click", "#btnUpdateClientDetails", function () {

            if (ClientUpdataeFromSeveralPageManager.UpdateClientDetailsValidation() === true) {
                @if ((bool)HttpContext.Current.Session["MikrotikOptionEnable"])
                 {
                     <text>
                         if ($("#lstMikrotik").val() === '') {
                             AppUtil.ShowSuccess("Please Insert Mikrotik Information.");
                             return false;
                         }
                         //if (AppUtil.GetIdValue("IP") === '') {
                         //    AppUtil.ShowSuccess("Please Insert IP.");
                         //    return false;
                         //}
                         //if (AppUtil.GetIdValue("Mac") === '') {
                         //    AppUtil.ShowSuccess("Please Insert Mac.");
                         //    return false;
                         //}
                     </text>
                 }
                //ClientUpdataeFromSeveralPageManager.UpdateClientDetailsPopUpFromOtherPages();
                ClientUpdataeFromSeveralPageManager.UpdateClientDetailsPopUpFromOtherPagesWithPageNumber();
            }
        });


        $('#PopsLineStatusActiveDate').datepicker({
            dateFormat: 'mm/dd/yy',
            numberOfMonths: 1,
            changeMonth: true,
            changeYear: true
        });


        $("#ContactNumber").keyup(function () {
            var mob = $("#ContactNumber").val();
            $("#SMSCommunication").val(mob);
        });
    });

</script>





