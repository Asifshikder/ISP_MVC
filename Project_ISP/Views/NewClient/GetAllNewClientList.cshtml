@using ISP_ManagementSystemModel
@model List<ISP_ManagementSystemModel.Models.NewClientCustomInformation>
@{
    ViewBag.Title = "New Connection List";
}
<style>
    .btn-sm {
        padding: 3px 6px;
    }
</style>

<script src="~/Scripts/CustomScripts/ClientDetailsManager.js"></script>
<script src="~/Scripts/CustomScripts/ClientUpdateManager.js"></script>
<script src="~/Scripts/CustomScripts/NewConnectionManager.js"></script>
<script src="~/Scripts/CustomScripts/ImageManager.js"></script>
<script>


    var ClientDetailsID;
    var ClientLineStatusID;
    var ClientBannedStatusID;
    var ClientTransactionID;

    var itemAssignArray = [];
    var cableAssignArray = [];
    var cableLengthFromDB;
    var cableUsedFromDB;
    var cableCanBeUseForThisClientFromDB;
    var table = "";
    $(document).ready(function () {

         table = $("#tblAllNewClient").DataTable
        ({
            "language":
            {
                "processing": "<div class='overlay custom-loader-background'><i class='fa fa-cog fa-spin custom-loader-color'></i></div>"
            },
            "processing": true,
            "serverSide": true,


            "ajax":
            {
                "url": "/NewClient/GetAllNewClientsAJAXData",
                "type": "POST",
                "dataType": "JSON",
                data: function (d) {
                    d.ZoneID = $("#SearchByZoneID").val();
                    d.__RequestVerificationToken = $('[name=__RequestVerificationToken]').val();
                }
            },
            //https://stackoverflow.com/questions/11256864/jquery-datatables-actionlink-how-to-add
            "columnDefs": [
                { "targets": [0], "width": "5%" },
                { "width": "5%", "targets": [6] },
                { "targets": [0], "data": "ClientDetailsID", "render": function (data, type, row, meta) { return "<td hidden><input type='hidden' id='EmployeeDetailsID' name='EmployeeDetailsID' value=" + row.ClientDetailsID + "></td>" } },
                { "targets": [3], "orderable": false, "data": "Show", "render": function (data, type, row, meta) { return '<a href="https://www.google.com.bd/maps/place/' + row.LatitudeLongitude + '" target=_blank title="' + row.LatitudeLongitude + '">' + row.Address + '</a>' } },

                { "targets": [8], "data": "time", "render": function (data, type, row, meta) { return AppUtil.ParseDateTime(row.time) } },
                //{ "targets": [9], "data": "Show", "render": function (data, type, row, meta) { return row.StatusThisMonthID == '3' ? "<div style='color: green; font-weight:bold'>Active</td>" : "<div style='color: red; font-weight:bold'>Lock</td>" } },
                //{ "targets": [10], "data": "Show", "render": function (data, type, row, meta) { return row.StatusNextMonthID == '5' ? "<div style='color: red; font-weight:bold'>Lock</td>" : "<div style='color:green ; font-weight:bold'>Active</td>" } },
                {
                    "targets": [11], "data": "Show", "render": function (data, type, row, meta) {

                    return (row.ShowNewClient === true  ? "<a href='#' id='ShowNewClientInformationForUpdate'>Edit</a>" : "") +" "+ (row.SignUp === true ? "<a href='' id='ShowNewClientInformationForSignUp'>SignUp</a>" : "" )} },
                                                                                                                                     //'<a href="' + $('#list').data('url-edit').replace("replace", row.UserID) + '">Edit</a> | ' + '<a href="' + $('#list').data('url-details').replace("replace", row.UserID) + '">Details</a> | '
                { "targets": [12], "style": "align='center'", "data": "Action", "render": function (data, type, row, meta) { return row.DeleteButton === true ? ' <button id="btnDelete" type="button" class="btn btn-danger btn-sm padding" data-placement="top" data-toggle="modal" data-target="#popModalForDeletePermently"> <span class="glyphicon glyphicon-remove"></span> </button> ' : "" } }
            ],
            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                //console.log(nRow);
                $(nRow).find("td:eq(0)").attr("hidden", true);
                return nRow;
            },

            "columns": [
                {
                    "data": "ClientDetailsID"
                },
                {
                    "data": "Name"
                },
                {
                    "data": "Zone"
                },
                {
                    "data": ""
                },
                {
                    "data": "ContactNumber"
                },
                {
                    "data": "Package"
                },
                {
                    "data": "AssignedTo"
                },
                {
                    "data": "Survey"
                },
                {
                    "data": ""
                },
                {
                    "data": "CreateBy"
                },
                {
                    "data": "UpdateBy"
                },
                {     // fifth column (Edit link)
                    "data": ""

                },
                {     // fifth column (Edit link)
                    "data": ""

                }
            ]
        });



        //$('#BillPaymentDate').datepicker({
        //    dateFormat: 'mm/dd/yy',
        //    numberOfMonths: 1,
        //    changeMonth: true,
        //    changeYear: true
        //});

        $('#ConnectionDate').datepicker({
            dateFormat: 'mm/dd/yy',
            numberOfMonths: 1,
            changeMonth: true,
            changeYear: true
        });

        $("#tblAllNewClient").on("click", "#ShowNewClientInformationForUpdate", function (e) {
            e.preventDefault();

            var newClientInformationID = $(this).closest("tr").find("td:eq(0) input").val();
            NewConnectionManager.GetClientDetailsByID(newClientInformationID);
            //ClientUpdateManager.GetNewClientDetailsByID(newClientInformationID);
        });

        $("#tblAllNewClient").on("click", "#ShowNewClientInformationForSignUp", function (e) {

            e.preventDefault();

            ClientDetailsID = $(this).closest("tr").find("td:eq(0) input").val();

            NewConnectionManager.GetClientDetailsByIDForSignUp(ClientDetailsID);
        });

        $("#PopUp").on("click", "#btnUpdateClientDetails", function () {
            if (NewConnectionManager.UpdateClientDetailsValidation() === true) {
                NewConnectionManager.UpdateClientDetails();
            }

        });

        $("#PopUp").on("click", "#btnPopUpClientUpdateClose", function () {

            $("#tblUpdateNewConnectionInformation").modal("hide");
        });

        //$("#btnPopUpNewClientSignUpClose").click(function () {
        //    $("#AssignItemToCustomer").prop("checked", false);
        //    $("#tblEmployeeDetails").modal("hide");
        //});

        $("#btnUpdateNewClientSignUpDetails").click(function () {

            if (NewConnectionManager.UpdateClientDetailsSignUpValidation() === true) {

                @if ((bool)HttpContext.Current.Session["MikrotikOptionEnable"])
                {
                    <text>
                        if ($("#lstMikrotik").val() === '') {
                            AppUtil.ShowSuccess("Please Insert Mikrotik Information.");
                            return false;
                        }

                        //if (AppUtil.GetIdValue("IP") === '') {
                        //    AppUtil.ShowSuccess("Please Insert IP.");
                        //    return false;
                        //}
                        //if (AppUtil.GetIdValue("Mac") === '') {
                        //    AppUtil.ShowSuccess("Please Insert Mac.");
                        //    return false;
                        //}
                    </text>
                }
                NewConnectionManager.UpdateClientDetailsSignUp(ClientDetailsID);
            }
        });

        $("#LoginName").change(function () {
            var loginName = $("#LoginName").val();
            ClientDetailsManager.ClientLoginExistOrNot(loginName);
        });

        //$("#tblAllNewClient").on("click", "#btnDelete", function () {
        //
        //    ClientDetailsID = $(this).closest("tr").find("td:eq(0) input").val();
        //    NewConnectionManager.DeleteNewClientDetails();
        //});
        $("#tblAllNewClient").on("click", "tr", function () {

            ClientDetailsID = $(this).closest("tr").find("td:eq(0) input").val();
        });

        $("#btnSearchClientListByZone").click(function () {

            var SearchID = $("#SearchByZoneID").val();
            var searchType = 1;
            NewConnectionManager.SearchClientListByZone(SearchID, searchType);
        });

        $("#AssignItemToCustomer").change(function () {

            if ($(this).is(":checked")) {
                //alert("checked");

                // if (ClientDetailsManager.Validation() === true) {

                $("#mdlAssignStockToClientFromNewClient").modal("show");
                //} else {
                //
                //    $("#AssignItemToCustomer").prop('checked', false);
                //}

            } else {
                // alert("Unchecked");
                $("#mdlAssignStockToClientFromNewClient").modal("hide");
            }
        });

        $("#lstStockID").change(function () {

            var stockID = $("#lstStockID").val();
            ClientDetailsManager.GetStockDetailsItemListByStockID(stockID);
        });

        $("#CableStockID").change(function () {

            var cableStockID = $("#CableStockID").val();
            ClientDetailsManager.SearchCableQuantityStockedByCableBoxOrDrumName(cableStockID);
        });

        $("#btnAddInAssignProductTableForCustomer").click(function () {
            if (ClientDetailsManager.ValidationForAddItemInListForAssigningToCustomer() === true) {
                var employeeID = $("#lstEmployeeID").val();
                var stockID = $("#lstStockID").val();
                var stockDetailsID = $("#lstStockDetailsID").val();
                var customerID = "";

                var employeeName = $("#lstEmployeeID option:selected").text();
                var customerName = $("#Name").val();
                var itemName = $("#lstStockID option:selected").text();
                var itemSerial = $("#lstStockDetailsID option:selected").text();

                var serialExist = false;

                $("#tblItemList>tbody>tr").each(function () {

                    var index = $(this).index();
                    var serial = $(this).find("td:eq(1) input").val();
                    if (serial == stockDetailsID) {
                        serialExist = true;
                    }
                });

                if (itemAssignArray.filter(e=>e.StockDetailsID == stockDetailsID).length > 0) {

                    serialExist = true;
                }

                if (serialExist) {
                    AppUtil.ShowSuccess("Sorry serial Already Added in the list. Choose different serial number.");
                } else {
                    $("#tblItemList>tbody").append("<tr><td style='padding:0px;'><input type='hidden' value='" + stockID + "'></td><td style='padding:0px;'><input type='hidden' value='" + stockDetailsID + "'></td>\
                    <td style='padding:0px;'><input type='hidden' value='" + employeeID + "'></td><td style='padding:0px;'><input type='hidden' value='" + customerID + "'></td>\
                    <td>" + employeeName + "</td><td>" + customerName + "</td><td>" + itemName + "</td><td>" + itemSerial + "</td>\
                    <td align='center'><button id='btnDelete' type='button' class='btn btn-danger btn-sm padding' data-toggle='confirmation' data-placement='top'><span class='glyphicon glyphicon-remove'></span></button></td>\
                </tr>");
                }
            }
        });

        $("#btnAddInAssignCableTableForCustomer").click(function () {
            //  if (ClientDetailsManager.ValidationForAddItemInListForAssigningToCustomer() === true) {
            //   var CableTypePopUpID = $("#CableTypePopUpID").val();

            if (ClientDetailsManager.CableAddInListValidation()) {

                var cableStockID = $("#CableStockID").val();
                var employeeID = $("#lstEmployeeID").val();
                var txtCableQuantity = $("#txtCableQuantity").val();
                var customerID = "";

                var employeeName = $("#lstEmployeeID option:selected").text();
                var customerName = $("#Name").val();
                var CableTypeName = $("#CableTypePopUpID option:selected").text();
                var cableBoxOrDrumName = $("#CableStockID option:selected").text();

                var cableStockExist = false;

                $("#tblCableList>tbody>tr").each(function () {

                    var index = $(this).index();
                    var CableStockID = $(this).find("td:eq(0) input").val();
                    if (CableStockID == cableStockID) {
                        cableStockExist = true;
                    }
                });

                if (cableAssignArray.filter(e=>e.CableStockID == cableStockID).length > 0) {

                    cableStockExist = true;
                }

                if (cableStockExist) {
                    AppUtil.ShowSuccess("Sorry Cable Already Added in the list. Choose different serial number. Remove first then again agiain.");
                } else {
                    $("#tblCableList>tbody").append("<tr><td hidden='hidden' style=''><input type='hidden' value='" + cableStockID + "'></td><td hidden='hidden'><input type='hidden' value='" + txtCableQuantity + "'></td>\
                    <td hidden='hidden'><input type='hidden' value='" + employeeID + "'></td>\
                    <td>" + employeeName + "</td><td>" + customerName + "</td><td>" + CableTypeName + "</td><td>" + cableBoxOrDrumName + "</td><td>" + txtCableQuantity + "</td>\
                    <td align='center'><button id='btnDelete' type='button' class='btn btn-danger btn-sm padding padding' data-toggle='confirmation' data-placement='top'><span class='glyphicon glyphicon-remove'></span></button></td>\
                </tr>");

                    $("#CableTypePopUpID").prop("selectedIndex", 0);
                    $("#CableStockID").find("option").not(":first").remove();
                    $("#txtCableQuantity").val("");
                    $("#lblTotalCableLength").text("").css("display", "none");
                    $("#lblUsedCableLength").text("").css("display", "none");
                    $("#lblDueCableLength").text("").css("display", "none");

                }
                // }
            }

        });
        //$("#tblPop").DataTable({
        //    "pageLength": 3
        //});

        $("#CableTypePopUpID").change(function () {

            var cableTypePopUpID = $("#CableTypePopUpID").val();
            ClientDetailsManager.SearchCableBoxOrDrumNameByCableTypeID(cableTypePopUpID);
        });

        $("#btnPopUpAssignItemForEmployee,#btnAssignItemForEmployeeClose").click(function () {
            $("#AssignItemToCustomer").prop("checked", false);
            $("#mdlAssignStockToClientFromNewClient").modal("hide");
        });

        $("#btnAssignItemForEmployee").click(function () {
            itemAssignArray = [];
            cableAssignArray = [];
            if ($("#tblItemList>tbody>tr").length > 0 || $("#tblCableList>tbody>tr").length > 0) {
                if ($("#tblItemList>tbody>tr").length > 0) {

                    $("#tblItemList>tbody>tr").each(function () {

                        var stokID = $(this).find('td:eq(0) input').val();
                        var stokDetailsID = $(this).find('td:eq(1) input').val();
                        var employeeID = $(this).find('td:eq(2) input').val();
                        itemAssignArray.push({
                            "StockID": stokID,
                            "StockDetailsID": stokDetailsID,
                            "EmployeeID": employeeID
                        });
                    });
                }
                if ($("#tblCableList>tbody>tr").length > 0) {

                    $("#tblCableList>tbody>tr").each(function () {


                        var cableStockID = $(this).find('td:eq(0) input').val();
                        var cableQuantity = $(this).find('td:eq(1) input').val();
                        var employeeID = $(this).find('td:eq(2) input').val();
                        cableAssignArray.push({
                            "CableStockID": cableStockID,
                            "CableQuantity": cableQuantity,
                            "EmployeeID": employeeID
                        });
                    });
                }



                //if (itemAssignArray.length > 0) {
                //    StockManager.InsertStockItem(itemArray);
                //}

            } else {
                AppUtil.ShowError("Please Add Information in table.");
            }
            $("#mdlAssignStockToClientFromNewClient").modal("hide");
        });

        $("#tblCableList").on("click", "#btnDelete", function () {

            var index = $(this).index();
            var removeItemCableStockID = $(this).closest("tr").find("td:eq(1) input").val();
            $("#tblCableList>tbody>tr:eq(" + index + ")").remove();

            cableAssignArray = JQuery.grep(cableAssignArray, function (value) {
                return removeItemCableStockID != value.CableStockID;
            });


        });

        $("#tblItemList").on("click", "#btnDelete", function () {

            var index = $(this).index();
            var removeItemStockDetailsID = $(this).closest("tr").find("td:eq(1) input").val();
            $("#tblItemList>tbody>tr:eq(" + index + ")").remove();

            itemAssignArray = jQuery.grep(itemAssignArray, function (value) {

                console.log(value);
                return value.StockDetailsID != removeItemStockDetailsID;
            });

        });

        $("#btnEmployeeDeletePermently").click(function () {
            NewConnectionManager.DeleteNewClientDetails();
            $("#popModalForDeletePermently").modal("hide");
        });

        $("#btnExportExcel").click(function () {
            NewConnectionManager.PrintRequestClientList();
        });
        //$("#closeTblEmployeeDetailsNewConnection").click(function () {
        //    $("#AssignItemToCustomer").prop("checked", false);
        //});
        $("#closeTblEmployeeDetailsNewConnection,#btnPopUpNewClientSignUpClose").click(function () { 
            NewConnectionManager.ClearClientDetailsModalInformation();  
            $("#AssignItemToCustomer").prop("checked", false);
            $("#tblEmployeeDetails").modal("hide");
        });
    });
</script>

@Html.AntiForgeryToken()

<div class="panel panel-default" style="margin-bottom: 0px">
    <div class="panel-heading">

        <section class="content-header">
            <h6 class="panel-title">New Connection/Client List</h6>
            <ol class="breadcrumb">
                <li class="active"><a href="/NewClient/GetAllNewClientList"><i class="fa fa-dashboard"></i> New Client</a></li>

            </ol>
        </section>
    </div>
    <div class="panel-body">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h4 class="panel-title">Select Zone</h4>
            </div>
            <div class="panel-body">
                <div class="col-sm-6">
                    @Html.DropDownList("SearchByZoneID", null, "-- All Zone --", new { @class = "form-control input-sm" })
                </div>
                <div class="col-sm-6">
                    <input type="Button" id="btnSearchClientListByZone" value="Find" class="btn btn-primary btn-sm" />
                </div>
            </div>
            <div style="float:right;">
                <a class="btn btn-sm btn-primary" href="\NewClient\NewConnection">New Connection</a>

                <input type="button" id="btnExportExcel" class="btn btn-sm btn-primary  btn-sm" value="Export Excel">
            </div>
        </div>
        <br /><br />



        <table id="tblAllNewClient" class="table table-bordered table-hover table-responsive table-striped" style="align-content: center; width: 100%;">
            <thead>
                <tr>
                    <th hidden="hidden"></th>
                    <th> Name</th>
                    <th>Zone</th>
                    <th> Address</th>
                    <th>Contact</th>
                    <th> Package</th>
                    <th> Assigned To</th>
                    <th> Survey </th>
                    <th>Time</th>
                    <th>CreatedBy</th>
                    <th>UpdateBy</th>
                    <th>Action</th>
                    <th>?</th>
                </tr>
            </thead>
            @*<tbody id="ClassTable">
                    @foreach (var client in Model)
                    {
                        <tr>
                            <td hidden="hidden">@Html.HiddenFor(s => client.ClientDetailsID)</td>
                            <td>@Html.DisplayFor(s => client.Name)</td>
                            <td>@Html.DisplayFor(s => client.Zone.ZoneName)</td>
                            <td>@Html.DisplayFor(s => client.Address)</td>
                            <td>@Html.DisplayFor(s => client.ContactNumber)</td>
                            <td>@Html.DisplayFor(s => client.Package.PackageName)</td>
                            <td>@Html.DisplayFor(s => client.Employee.Name)</td>
                            <td>@Html.DisplayFor(s => client.ClientSurvey)</td>

                            @{
                                string createdDate = @Convert.ToString(string.Format("{0:dd/MM/yyyy hh:mm}", client.CreateDate));
                                string updateDate = @Convert.ToString(string.Format("{0:dd/MM/yyyy hh:mm}", client.UpdateDate));
                                <td>@(string.IsNullOrEmpty(updateDate) ? createdDate : updateDate)</td>
                            }

                            <td>@Html.DisplayFor(s => client.CreateBy)</td>
                            <td>@Html.DisplayFor(s => client.UpdateBy)</td>
                            <td>
                                @if (ISP_ManagementSystemModel.AppUtils.HasAccessInTheList(ISP_ManagementSystemModel.AppUtils.Update_Request_Client))
                                {
                                    <a href="" id="ShowNewClientInformationForUpdate">Show</a>
                                }
                                @if (ISP_ManagementSystemModel.AppUtils.HasAccessInTheList(ISP_ManagementSystemModel.AppUtils.Sign_Up_New_Client))
                                {
                                    <a href="" id="ShowNewClientInformationForSignUp">SignUp</a>
                                }
                            </td>
                            <td align="center">
                                @*<button class="btn btn-default" id="btn-confirm">Confirm</button>
                                    <button type="button" id="btnEdit" class="btn btn-success btn-block" style="width: 40px;">
                                        <span class="glyphicon glyphicon-ok"></span>
                                    </button>
                                @if (ISP_ManagementSystemModel.AppUtils.HasAccessInTheList(ISP_ManagementSystemModel.AppUtils.Delete_Request_Client))
                                {
                                    <button id="btnDelete" type="button" class="btn btn-danger btn-sm" data-toggle="modal" data-target="#popModalForDeletePermently" data-placement="top">
                                        <span class="glyphicon glyphicon-remove"></span>
                                    </button>
                                }
                            </td>
                        </tr>
                                }
                </tbody>*@
        </table>

        @if (ISP_ManagementSystemModel.AppUtils.HasAccessInTheList(ISP_ManagementSystemModel.AppUtils.Update_Request_Client))
        {
            <div class="modal fade" id="tblUpdateNewConnectionInformation" role="dialog" style="overflow:auto">
                <div class="modal-dialog modal-lg" style="width:80%">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">Update Request Client Information</h4>
                        </div>
                        <div class="modal-body panel-body">
                            @Html.Partial("Partial_newConnection")
                        </div>
                        <div class="modal-footer">
                            @*<button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>*@
                            <div id="PopUp" style="float:right">
                                <input type="button" id="btnPopUpClientUpdateClose" value="Close" class="btn btn-default btn-sm" />
                                <input type="button" id="btnUpdateClientDetails" value="Update New Client Information" class="btn btn-primary btn-sm" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        @if (ISP_ManagementSystemModel.AppUtils.HasAccessInTheList(ISP_ManagementSystemModel.AppUtils.Sign_Up_New_Client))
        {
            <div class="modal fade" id="tblEmployeeDetails" role="dialog" style="overflow: hidden; overflow-y: scroll;" data-backdrop="static" data-keyboard="false">
                <div class="modal-dialog modal-lg" style="width:75%">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button id="closeTblEmployeeDetailsNewConnection" type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">Sign Up Request Client Information</h4>
                        </div>
                        <div class="modal-body panel-body">
                            @*@Html.Partial("Partial_SpecificCLientDetails")*@

                            @Html.Partial("Partial_Specific_ClientDetails_NewConnection")

                        </div>
                        @if ((bool)HttpContext.Current.Session["MikrotikOptionEnable"])
                        {
                            <div class="panel panel-default">
                                <div class="panel-heading">
                                    <h6 class="panel-title">Mikrotik</h6>
                                </div>

                                <div class="panel-body">

                                    <div class="form-group col-sm-1"></div>
                                    <div class="form-group col-sm-6">
                                        <div>
                                            @Html.Label("MIkrotik", new { @class = "control-label col-md-0", Style = "float:left" })
                                            <span class="required_field col-md-0" style="padding-left: 5px"> *</span>
                                        </div>
                                        <div style="clear: both"> </div>
                                        <div class="col-md-11" style="padding-left: 0px;">
                                            @Html.DropDownList("lstMikrotik", null, "--Select Mikrotik--", new { @class = "form-control input-sm col-sm-11", @placeholder = " Select Mikrotik " })
                                        </div>
                                    </div>
                                    <div class="form-group col-sm-5">
                                        <div>
                                            @Html.Label("IP", new { @class = "control-label col-md-0", Style = "float:left" })
                                            @*<span class="required_field col-md-0" style="padding-left: 5px"> *</span>*@
                                        </div>
                                        <div style="clear: both"> </div>
                                        <div class="col-md-11" style="padding-left: 0px;">
                                            @Html.TextBox("IP", null, new { @class = "form-control input-sm col-sm-11", @placeholder = " 131.33.14.35 " })
                                        </div>
                                    </div>

                                    <div class="form-group col-sm-1"></div>
                                    <div class="form-group col-sm-6">
                                        <div>
                                            @Html.Label("Mac", new { @class = "control-label col-md-0", Style = "float:left" })
                                            @*<span class="required_field col-md-0" style="padding-left: 5px"> *</span>*@
                                        </div>
                                        <div style="clear: both"> </div>
                                        <div class="col-md-11" style="padding-left: 0px;">
                                            @Html.TextBox("Mac", null, new { @class = "form-control input-sm col-sm-11", @placeholder = " 01:1e:ed:34:45:89 " })
                                        </div>
                                    </div>
                                </div>

                            </div>
                        }
                        <div class="form-group col-sm-6">
                            <div>
                                @Html.Label("Add Product For Client: ", new { @class = "control-label col-md-0", Style = "float:left" })
                                <div class="col-md-3" style="padding-left: 20px;">
                                    @Html.CheckBox("AssignItemToCustomer", false)
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            @*<button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>*@
                            <div id="PopUp" style="float:right">
                                <input type="button" id="btnPopUpNewClientSignUpClose" value="Close" class="btn btn-default btn-sm" />
                                <input type="button" id="btnUpdateNewClientSignUpDetails" value="Update Client Information" class="btn btn-primary btn-sm" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        @if (ISP_ManagementSystemModel.AppUtils.HasAccessInTheList(ISP_ManagementSystemModel.AppUtils.Assign_Item_Or_Cable_To_Employee))
        {
            <div class="modal fade" id="mdlAssignStockToClientFromNewClient" role="dialog" style="overflow:auto" data-backdrop="static" data-keyboard="false">
                <div class="modal-dialog modal-lg" style="width:90%">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button id="btnPopUpAssignItemForEmployee" type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">Change Section And Product Status </h4>
                        </div>
                        <div class="modal-body panel-body">
                            @Html.Partial("Partial_AssignStockFromNewClient")
                        </div>
                        <div class="modal-footer">
                            <div id="PopUp" style="float:right">
                                <input type="button" id="btnAssignItemForEmployeeClose" value="Close" class="btn btn-default btn-sm" />
                                <input type="button" id="btnAssignItemForEmployee" value="Assign Item To Client" class="btn btn-primary btn-sm" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        @if (ISP_ManagementSystemModel.AppUtils.HasAccessInTheList(ISP_ManagementSystemModel.AppUtils.Delete_Request_Client))
        {
            <div class="modal fade" id="popModalForDeletePermently" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            Confirm Submit
                        </div>
                        <div class="modal-body">
                            Are you sure you want to Delete This Employee Permently?
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                            <a href="#" id="btnEmployeeDeletePermently" class="btn btn-success success">Delete Request Client</a>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
