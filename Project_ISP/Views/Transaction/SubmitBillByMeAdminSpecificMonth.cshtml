@using ISP_ManagementSystemModel
@model  IEnumerable<Project_ISP.Custom_Model.CustomClientLineStatus>
@{
    ViewBag.Title = "Collect Client Bill By Me";
}
<head>
    <style>
        .padding {
            padding: 3px 6px;
        }

        .ui-autocomplete {
            max-height: 200px;
            overflow-y: auto;
            /* prevent horizontal scrollbar */
            overflow-x: hidden;
            /* add padding to account for vertical scrollbar */
            padding-right: 20px;
        }
    </style>

    <link href="~/Content/CSSReference/jquery-ui1.9.2.css" rel="stylesheet" />
</head>

@Html.AntiForgeryToken()

<div class="container" style="padding-left: 0px; padding-top:0%">
    <div class="panel panel-default">
        <div class="panel-heading">
            <section class="content-header">
                <h6 class="panel-title">Search Client For Pay Bill</h6>
            </section>
        </div>

        <div class="panel-body">

            <div class="form-group col-sm-6">
                <div>
                    @Html.Label("Login Name", new { @class = "control-label col-md-0", Style = "float:left" })
                    <span class="required_field col-md-0" style="padding-left:5px"> *</span>
                </div>
                <div style="clear:both"> </div>
                <div class="col-md-11" style="padding-left: 0px;">
                    @Html.TextBox("txtLoginName", null, new { @onkeydown = "checkKey(event);", @Style = "max-width: 100%;", @class = "form-control input-sm col-sm-10", @placeholder = " Search Client " })
                </div>
            </div>

            <div class="form-group col-sm-6">
                <div>
                    @Html.Label("Client Name", new { @class = "control-label col-md-0", Style = "float:left" })
                    <span class="required_field col-md-0" style="padding-left:5px"> *</span>
                </div>
                <div style="clear:both"> </div>
                <div class="col-md-11" style="padding-left: 0px;">
                    @Html.TextBox("txtName", null, new { @Style = "max-width: 100%;", @class = "form-control input-sm col-sm-6", @placeholder = " Login Name ", @disabled = "disabled" })
                </div>
            </div>


            <div class="form-group col-sm-6">
                <div>
                    @Html.Label("Zone", new { @class = "control-label col-md-0", Style = "float:left" })
                    <span class="required_field col-md-0" style="padding-left:5px"> *</span>
                </div>
                <div style="clear:both"> </div>
                <div class="col-md-11" style="padding-left: 0px;">
                    @Html.TextBox("txtZone", null, new { @Style = "max-width: 100%;", @class = "form-control input-sm col-sm-6", @placeholder = " Zone ", @disabled = "disabled" })
                </div>
            </div>

            <div class="form-group col-sm-6">
                <div>
                    @Html.Label("Mobile", new { @class = "control-label col-md-0", Style = "float:left" })
                    <span class="required_field col-md-0" style="padding-left:5px"> *</span>
                </div>
                <div style="clear:both"> </div>
                <div class="col-md-11" style="padding-left: 0px;">
                    @Html.TextBox("txtMobile", null, new { @Style = "max-width: 100%;", @class = "form-control input-sm col-sm-6", @placeholder = " Mobile ", @disabled = "disabled" })
                </div>
            </div>

            <div class="form-group col-sm-12">
                <div>
                    @Html.Label("Address", new { @class = "control-label col-md-0", Style = "float:left" })
                    <span class="required_field col-md-0" style="padding-left:5px"> *</span>
                </div>
                <div style="clear:both"> </div>
                <div class="col-md-11" style="padding-left: 0px;">
                    @Html.TextArea("txtAddress", null, new { @Style = "max-width: 100%;", @class = "form-control input-sm col-sm-6", @placeholder = " Address ", @disabled = "disabled" })
                </div>
            </div>

        </div>

        <div class="panel panel-default">
            <div class="panel-heading">
                <section class="content-header">
                    <h6 class="panel-title">Due Bills</h6>
                </section>
            </div>

            <div class="panel-body">
                <table id="tblClientDueBillsList" class="table table-hover table-responsive table-striped" style="align-content: center;">
                    <thead>
                        <tr>
                            <th hidden></th>
                            <th></th>
                            <th>Month</th>
                            <th>package</th>
                            <th>Fee</th>
                            <th>Paid_Amount</th>
                            <th>Discount</th>
                            <th>Due</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="popModalForPayment" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                Confirm Submit
            </div>
            <div class="modal-body">
                Are you sure you want to Pay This Client ?
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <a href="#" id="btnPay" class="btn btn-success success">Pay Bill</a>
            </div>
        </div>
    </div>
</div>

@if (ISP_ManagementSystemModel.AppUtils.IsGranted(ISP_ManagementSystemModel.AppUtils.Pay__Bill)
        || ISP_ManagementSystemModel.AppUtils.IsGranted(ISP_ManagementSystemModel.AppUtils.Pay_Due_Bill))
{
<div class="modal fade" id="mdlMakePayment" style="overflow: hidden; overflow-y: scroll;" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-lg" style="width:65%">
        <div class="modal-content">
            <div class="modal-header">
                <button id="btnPayBillCloseTop" type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Do You want to pay for this client?</h4>
            </div>
            <div class="modal-body panel-body">
                @Html.Partial("Partial_Due_Payment_Specific_Month")
            </div>
            <div class="modal-footer"> 
                <div id="PopUp" style="float:right">
                    <input type="button" id="btnPayBillClose" value="No" class="btn btn-default btn-sm" />
                    <input type="button" id="btnPayBill" value="Yes" class="btn btn-primary btn-sm" />
                </div>
            </div>
        </div>
    </div>
</div>
}

<script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>
<script src="~/Scripts/notify.js"></script>
<script src="~/Scripts/CustomScripts/ClientDetailsManager.js"></script>
<script src="~/Scripts/CustomScripts/CommonManager.js"></script>
<script src="~/Scripts/CustomScripts/B_P_Manager.js"></script>
<script src="~/Scripts/CustomScripts/BPManager.js"></script>

<script>

    var _ClientDetailsID;
    var ClientLineStatusID;
    var ClientBannedStatusID;
    var ClientTransactionID;
    var _oldDiscount = 0;
    var T_ID; 
    var _InformationUpdateForWhichPage = "submitbillbymeadminspecificmonth";

    function showWaitingDialog() {
        //AppUtil.ShowWaitingDialog();
    }

    function hideWaitingDialog() {
        //AppUtil.HideWaitingDialog();
    }

    function checkKey(evt) {
        var keyID = (evt.charCode) ? evt.charCode : ((evt.which) ? evt.which : evt.keyCode);
        console.log("Press Key: " + keyID);
        if (keyID == 8) {
            _ClientDetailsID = "";
            $("#btnPayBill").css("visibility", "hidden");

            $("#txtTotalBillNeedToPay").val("");
            $("#txtPaymentAmount").val("");
            $("#txtDicountByAdmin").val("");
            $("#txtDue").val("");
            $("#txtAdvance").val("");


            $("#txtName").val("");
            $("#txtZone").val("");
            $("#txtMobile").val("");
            $("#txtAddress").val("");
            $("#tblClientDueBillsList>tbody>tr").empty();

        }
    }

    function clearPayment() {
        _oldDiscount = "";
        $("#txtPaymentAmount").val("");
        $("#txtDicountByAdmin").val("");
        $("#txtDue").val("");
        $("#txtAdvance").val("");
    }

    $(document).ready(function () {

        $('#ConnectionDate').datepicker({
            dateFormat: 'mm/dd/yy',
            numberOfMonths: 1,
            changeMonth: true,
            changeYear: true
        });

        $("#tblClientDueBillsList").on("change", "input[name=chkPayDueBills]:radio", function () {
            T_ID = $(this).closest("tr").find("td:eq(0) input").val();
            $("#tblClientDueBillsList>tbody>tr").each(function () {
                var rowIndex = $(this).index();
                $("#tblClientDueBillsList>tbody>tr>td>input[name=chkPayDueBills]:radio").each(function () {
                    if ($(this).is(":checked")) {
                        $(this).closest("tr").css("border", "1px solid red");
                    }
                    else {
                        $(this).closest("tr").css("border", "0px solid red");
                    }
                });
            });
            BPManager.GetClientPaymentAmountAndRemarksAndSleepNoForDuePayment(T_ID);
        });

        $("#txtLoginName").autocomplete
            ({
                focus: function (event, ui) {

                    //_ClientDetailsID = ui.item.val;

                    console.log("event focus : " + ui.item.val);
                    console.log("focus : " + ui.item.val);
                    // or $('#autocomplete-input').val(ui.item.label);

                    // Prevent the default focus behavior.
                    event.preventDefault();
                    // or return false;

                    //B_P_Manager.ShowDueBillDetailssByClientDetailsID(ui.item.val);
                    _ClientDetailsID = ui.item.val;
                    B_P_Manager.ShowClientInfoWIthSumOfTotalDueByClientDetailsID(ui.item.val);
                    B_P_Manager.ShowDueBillDetailssByClientDetailsIDSpecificMonth(ui.item.val)
                    if ($("#txtTotalBillNeedToPay").val() !== '') {
                        $("#btnPayBill").css("visibility", "visible");
                    }
                },

                source: function (request, response) {

                    _ClientDetailsID = "";
                    $("#btnPayBill").css("visibility", "hidden");
                    $("#txtName").val("");
                    $("#txtZone").val("");
                    $("#txtMobile").val("");
                    $("#txtAddress").val("");
                    $("#txtTotalBillNeedToPay").val("");
                    $("#txtPaymentAmount").val("");
                    $("#txtDicountByAdmin").val("");
                    $("#txtDue").val("");
                    $("#txtAdvance").val("");
                    $("#txtResetNo").val("");
                    $("#txtRemarksNo").val("");
                    $("#tblClientDueBillsList>tbody>tr").empty();

                    $.ajax({
                        url: "/Client/GetAutoCompleateInformationForSearchCriteria",
                        data: "{ 'SearchText': '" + request.term + "'}",
                        dataType: "json",
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {


                            response($.map(data, function (item) {
                                //
                                //return {
                                //    label: item.label,
                                //    value: item.val
                                //};


                                return item;
                            }));
                        },
                        error: function (data) {
                            alert(response.responseText);
                        },
                        failure: function (response) {
                            alert(response.responseText);
                        }


                    });
                }
                ,
                select: function (e, i) {

                    console.log("event select : " + e);
                    console.log(" select : " + i.item.val);
                    //$("#hfCustomer").val(i.item.val);
                },
                open: function () {
                    $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
                },
                close: function () {
                    $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
                }
                ,
                minLength: 1
            });

        $("#txtPaymentAmount").keyup(function () {
            //AppUtil.ShowError("a");
            var txtTotalBill = parseInt(AppUtil.GetIdValue("txtTotalBillNeedToPay"));
            var txtPaymentAmount = parseInt(AppUtil.GetIdValue("txtPaymentAmount"));
            var txtDiscount = parseInt(AppUtil.GetIdValue("txtDicountByAdmin"));

            if (!isNaN(txtTotalBill)) {
                if (!isNaN(txtPaymentAmount)) {
                    var dueAmount;
                    var advance;
                    var discount = isNaN(txtDiscount) ? 0 : txtDiscount;
                    if ((txtPaymentAmount + discount) <= txtTotalBill) {
                        advance = 0;
                        dueAmount = isNaN(txtDiscount) ? (txtTotalBill - txtPaymentAmount) : (txtTotalBill - (txtPaymentAmount + txtDiscount));
                    }
                    else {
                        dueAmount = 0;
                        advance = isNaN(txtDiscount) ? (txtTotalBill - txtPaymentAmount) : ((txtPaymentAmount + txtDiscount) - txtTotalBill);
                    }

                    $("#txtDue").val(dueAmount);
                    $("#txtAdvance").val(Math.abs(advance));
                }
                else {
                    clearPayment();
                }
            }
            else {
                clearPayment();
            }
        });

        $("#txtDicountByAdmin").keyup(function () {
            var txtTotalBill = parseInt(AppUtil.GetIdValue("txtTotalBillNeedToPay"));
            var txtPaymentAmount = parseInt(AppUtil.GetIdValue("txtPaymentAmount"));
            var txtDiscount = parseInt(AppUtil.GetIdValue("txtDicountByAdmin"));

            if (!isNaN(txtTotalBill)) {
                if (!isNaN(txtPaymentAmount)) {
                    if (!isNaN(txtDiscount)) {
                        if (txtDiscount > txtTotalBill) {
                            AppUtil.ShowError("Discount Value Is Larger Than Total Bill.");
                            $("#txtDicountByAdmin").val(_oldDiscount);
                            return;
                        }
                        if (txtDiscount < 0) {
                            AppUtil.ShowError("Discount Value Can Not Negative Number.");
                            $("#txtDicountByAdmin").val(_oldDiscount);
                            return;
                        }

                        var dueAmount;
                        var advance;
                        var discount = isNaN(txtDiscount) ? 0 : txtDiscount;
                        _oldDiscount = discount;
                        if ((txtPaymentAmount + discount) < txtTotalBill) {
                            advance = 0;
                            dueAmount = isNaN(txtDiscount) ? (txtTotalBill - txtPaymentAmount) : (txtTotalBill - (txtPaymentAmount + txtDiscount));
                        }
                        else {
                            dueAmount = 0;
                            advance = isNaN(txtDiscount) ? (txtTotalBill - txtPaymentAmount) : ((txtPaymentAmount + txtDiscount) - txtTotalBill);
                        }

                        $("#txtDue").val(dueAmount);
                        $("#txtAdvance").val(Math.abs(advance));
                    }
                    else {
                        AppUtil.ShowError("Discount Value Is Not In Correct Format.");
                        clearPayment();
                    }
                }
                else {
                    clearPayment();
                }
            }
            else {
                clearPayment();
            }
        });

        $("#btnPayBill").click(function () {
            debugger;
            if (BPManager.PayValidation()) {
                BPManager.PayBill(T_ID,@AppUtils.PamentIsOccouringFromSubmitBillByMeAdminSpecificMonth);
            }
        });

        //$('#btnClientDueBillsListClose,#closeMdlShowDueBills').click(function () {
        //    $("#tblClientDueBillsList>tbody>tr").remove();
        //    $("#mdlClientDueBillsList").modal("hide");
        //});

        $('#btnPayBillClose,#btnPayBillCloseTop').click(function () {
           BPManager.ClearModalDueBillPageInformation(_InformationUpdateForWhichPage);
        });

        $("#btnExportExcel").click(function () {
            ClientDetailsManager.PrintEmployeeList();
        });

    });

</script>





