@using ISP_ManagementSystemModel
@model IEnumerable<ISP_ManagementSystemModel.ViewModel.VM_Transaction_EmpTraLockUnlock_ClientDueBills>

@{
    ViewBag.Title = "Unpaid Bills By Admin";
}

<style>
    .customDTWidth {
        padding: 0px;
    }

    .btn-sm {
        padding: 3px 6px;
    }

    .changetrbackground {
        background-color: #DFFBF0;
    }



    .checkbox {
        padding-left: 20px;
    }

        .checkbox label {
            display: inline-block;
            position: relative;
            padding-left: 5px;
        }

            .checkbox label::before {
                content: "";
                display: inline-block;
                position: absolute;
                width: 17px;
                height: 17px;
                left: 0;
                margin-left: -20px;
                border: 1px solid #cccccc;
                border-radius: 3px;
                background-color: #fff;
                -webkit-transition: border 0.15s ease-in-out, color 0.15s ease-in-out;
                -o-transition: border 0.15s ease-in-out, color 0.15s ease-in-out;
                transition: border 0.15s ease-in-out, color 0.15s ease-in-out;
            }

            .checkbox label::after {
                display: inline-block;
                position: absolute;
                width: 16px;
                height: 16px;
                left: 0;
                top: 0;
                margin-left: -20px;
                padding-left: 3px;
                padding-top: 1px;
                font-size: 11px;
                color: #555555;
            }

        .checkbox input[type="checkbox"] {
            opacity: 0;
        }

            .checkbox input[type="checkbox"]:focus + label::before {
                outline: thin dotted;
                outline: 5px auto -webkit-focus-ring-color;
                outline-offset: -2px;
            }

            .checkbox input[type="checkbox"]:checked + label::after {
                font-family: 'FontAwesome';
                content: "\f00c";
            }

            .checkbox input[type="checkbox"]:disabled + label {
                opacity: 0.65;
            }

                .checkbox input[type="checkbox"]:disabled + label::before {
                    background-color: #eeeeee;
                    cursor: not-allowed;
                }

        .checkbox.checkbox-circle label::before {
            border-radius: 50%;
        }

        .checkbox.checkbox-inline {
            margin-top: 0;
        }

    .checkbox-primary input[type="checkbox"]:checked + label::before {
        background-color: #428bca;
        border-color: #428bca;
    }

    .checkbox-primary input[type="checkbox"]:checked + label::after {
        color: #fff;
    }

    .checkbox-danger input[type="checkbox"]:checked + label::before {
        background-color: #d9534f;
        border-color: #d9534f;
    }

    .checkbox-danger input[type="checkbox"]:checked + label::after {
        color: #fff;
    }

    .checkbox-info input[type="checkbox"]:checked + label::before {
        background-color: #5bc0de;
        border-color: #5bc0de;
    }

    .checkbox-info input[type="checkbox"]:checked + label::after {
        color: #fff;
    }

    .checkbox-warning input[type="checkbox"]:checked + label::before {
        background-color: #f0ad4e;
        border-color: #f0ad4e;
    }

    .checkbox-warning input[type="checkbox"]:checked + label::after {
        color: #fff;
    }

    .checkbox-success input[type="checkbox"]:checked + label::before {
        background-color: #5cb85c;
        border-color: #5cb85c;
    }

    .checkbox-success input[type="checkbox"]:checked + label::after {
        color: #fff;
    }
</style>

<script src="~/Scripts/CustomScripts/UnpaidBillsManager.js"></script>
<script src="~/Scripts/CustomScripts/ClientUpdataeFromSeveralPageManager.js"></script>
<script src="~/Scripts/CustomScripts/ClientUpdateManager.js"></script>
<script src="~/Scripts/CustomScripts/AdminResellerFindingManager.js"></script>


<script>
    var table;
    var T_ID;
    var T_DuePayment_ID;
    var _ClientName;
    var _ClientLoginName;
    var byAdmin = true;


    var smsSendAry = [];
    var isCheckAll = false;
    var ifIsCheckAllThenNonCheckList = [];
    var ifNotCheckAllThenCheckList = [];
    var strchksms = "chkSMS";

    var _InformationUpdateForWhichPage = "unpaidbill";
    var _tblName = "tblClientUnpaidBill";
    var _rowIndex = "";
    var searchBySearchButton = 0;
    //var T_ID;
    //var T_DuePayment_ID;

    function setCompleteStatus(TransactionID) {
        T_ID = TransactionID;
        $("#btnShowBillPaymentWindow").css("visibility", "visible");
    }

    function GetClientDetailsByClientDetailsID(clientDetailsID, t_ID) {
        // AppUtil.ShowSuccess(clientDetailsID);

        T_ID = t_ID;
        //ClientUpdataeFromSeveralPageManager.GetClientDetailsByID(clientDetailsID);
        ClientUpdateManager.GetClientDetailsByID(clientDetailsID);
    }

    function enableDisableSMSSendOption(id, clnID) {
        debugger;
        var allCheck = $("input[name='chkSendSMSForAll']").prop("checked");

        var a = document.getElementById(id.id);
        if (a.checked) {
            smsSendAry.push('' + clnID + '');
            if (allCheck) {
                ifIsCheckAllThenNonCheckList = jQuery.grep(ifIsCheckAllThenNonCheckList, function (value) {
                    return value != clnID;
                });
            }
            else {
                ifNotCheckAllThenCheckList.push('' + clnID + '');
            }
        }
        else {
            //var res = jQuery.inArray("7028", smsSendAry);
            var aa = '' + clnID + '';
            if (jQuery.inArray(aa, smsSendAry) != -1) {
                smsSendAry = jQuery.grep(smsSendAry, function (value) {
                    return value != clnID;
                });
            }

            if (allCheck) {
                ifIsCheckAllThenNonCheckList.push(clnID);
            }
            else {
                ifNotCheckAllThenCheckList = jQuery.grep(ifNotCheckAllThenCheckList, function (value) {
                    return value != clnID;
                });
            }
        }

        ShowOrHideSMSDiv();
    }


    function makeEmptyForSendingSMS() {

        smsSendAry = [];
        isCheckAll = false;
        ifIsCheckAllThenNonCheckList = [];
        ifNotCheckAllThenCheckList = [];
    }


    $(document).ready(function () {

        
        $("#ResellerID").on("change", function () {

        $("#PackageThisMonth,#PackageNextMonth,#SearchByZoneID,#ZoneID").find("option").not(":first").remove(); 
            var ResellerID = $("#ResellerID").val();
            if (ResellerID != '') {
            AdminResellerFindingManager.ShowPackageDetailsByIDForUpdate(ResellerID);
            }
        });

       $("#"+_tblName+"").on("click","tr", function () {
            _rowIndex = $(this).index();
        });

         table = $("#tblClientUnpaidBill").DataTable
        ({
            "language":
            {
                "processing": "<div class='overlay custom-loader-background'><i class='fa fa-cog fa-spin custom-loader-color'></i></div>"
            },
            "processing": true,
            "serverSide": true,

                //"fnPreDrawCallback": function () {
                //
                //    alert("a");
                //},

            "ajax":
            {
                "url": "/Transaction/GetResellerCurrentMonthUnPaidBillsByAdminAJAXData",
                "type": "POST",
                "dataType": "JSON",
                data: function (d) {
                    d.ResellerID = $("#ResellerID").val();
                    d.YearID = $("#YearID").val();
                    d.MonthID = $("#MonthID").val();
                    d.ZoneID = $("#SearchByZoneID").val();
                    d.__RequestVerificationToken = $('[name=__RequestVerificationToken]').val();
                },
                    dataFilter: function (reps) {


                    if (searchBySearchButton !== 1) {

                        //TransactionManager.GetBillsListBySearchCriteria();
                        UnpaidBillsManager.GetDueBillsListBySearchCriteria(byAdmin);
                    }
                    searchBySearchButton = 0;
                    console.log(reps);
                    return reps;
                },
                //success: function (msg) {
                //
                //    fnCallback(msg);
                //    console.log(msg);
                //   // $("#sample_1").find("tbody").html(msg.data);
                //  //  $("#sample_1_processing").hide();
                //   // Init();
                //}
            },

            //https://stackoverflow.com/questions/11256864/jquery-datatables-actionlink-how-to-add
            "columnDefs": [
                // { "targets": [1], "width": "5%" },
                //{  "targets": [16] },
                { "targets": [0], "orderable": false, "data": "Show", "render": function (data, type, row, meta) { return row.chkSMS } },

                { "targets": [1], "data": "Show", "render": function (data, type, row, meta) { return (row.Paid === false) ? '<input class="checkGroup1" id="chkBillPay" name="chkBillPay" onclick="setCompleteStatus(' + row.TransactionID + ')" type="checkbox" value="true">' : "" } },
                { "targets": [2], "data": "Show", "render": function (data, type, row, meta) { return "<td hidden><input type='hidden' id='cid' name='cid' value=" + row.ClientDetailsID + "></td>" } },
                { "targets": [3], "data": "TransactionID", "render": function (data, type, row, meta) { return "<td hidden><input type='hidden' id='TransactionID' name='TransactionID' value=" + row.TransactionID + "></td>" } },
                { "targets": [4], "data": "Show", "render": function (data, type, row, meta) { return '<a href="#" onclick="GetClientDetailsByClientDetailsID(' + row.ClientDetailsID + ',' + row.TransactionID + ')">' + row.ClientLoginName + '</a>' } },
                { "targets": [13], "data": "Due", "render": function (data, type, row, meta) { return row.Due > 0 ? '<a href="" id="linkOfShowingDueAmount">' + row.Due + '</a>' : "<div style='color:blue'>0</div>" } },//alert("kamruol Hasan: " + row.Due +" "+ row.ClientDetailsID);
                { "targets": [14], "data": "Show", "render": function (data, type, row, meta) { return (row.StatusThisMonthID === 3) ? "<div style='color: green; font-weight:bold'>Active</td>" : "<div style='color: red; font-weight:bold'>Lock</td>" } },
                //{ "targets": [19], "orderable": false, "data": "Show", "render": function (data, type, row, meta) { return row.LineStatusActiveDate } },
                { "width": "5%", "targets": [20], "data": "Action", "render": function (data, type, row, meta) { return ('<div style="float: left"> <button type="button" id="btnPrint" class="btn btn-success  btn-sm"><span class="glyphicon glyphicon-print"></span></button> </div>') + " " + (row.Paid === true ? '<div style="float: right"><button type="button" id="" class="btn btn-success  btn-sm" title="Paid"><span class="glyphicon glyphicon-ok"></span></button></div>' : '<div style="float: right"><button type="button" id="" class="btn btn-danger btn-sm" title="Not Paid"><span class="glyphicon glyphicon-remove"></span></button> </div>') } }

            ],

            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                //console.log(nRow);

                if (aData.IsPriorityClient) {
                    $(nRow).removeClass('odd');
                    $(nRow).addClass('changetrbackground');
                }
                else {
                    //$(nRow).removeClass('changetrbackground');
                    $(nRow).removeClass('changetrbackground');
                }

                $(nRow).find("td:eq(2)").attr("hidden", true);
                $(nRow).find("td:eq(3)").attr("hidden", true);
                //$(nRow).find("td:eq(2)").attr("hidden", true);
                $(nRow).find("td:eq(11)").css("color", "blue");
                $(nRow).find("td:eq(13)").css("color", "blue");
                //$(nRow).find("td:eq(19)").css("padding", "8px 13px");
                return nRow;
            },

            "columns": [
                {
                    "data": ""
                },
                {
                    "data": ""
                },
                {
                    "data": ""
                },
                {
                    "data": "TransactionID"
                },

                {
                    "data": "ClientName"
                },
                {
                    "data": "Address"
                },
                {
                    "data": "ContactNumber"
                },
                {
                    "data": "ZoneName"
                },
                {
                    "data": "PackageName"
                },
                //{
                //    "data": "MonthlyFee"
                //},
                {
                    "data": "FeeForThisMonth"
                },
                {
                    "data": "PaidAmount"
                },
                {
                    "data": "Discount"
                },
                {
                    "data": "PermanentDiscount"
                },
                {
                    "data": "Due"
                },
                {     // fifth column (Edit link)
                    "data": "StatusThisMonthID"

                },
                {     // fifth column (Edit link)
                    "data": "PaidBy"

                },
                {     // fifth column (Edit link)
                    "data": "CollectBy"

                },

                {     // fifth column (Edit link)
                    "data": "PaidTime"

                },
                {     // fifth column (Edit link)
                    "data": "RemarksNo"

                },
                {     // fifth column (Edit link)
                    "data": "ReceiptNo"

                },
                //{     // fifth column (Edit link)
                //    "data": ""

                //},
                {
                    @*//"data": '@if (ISP_ManagementSystemModel.AppUtils.HasAccessInTheList(ISP_ManagementSystemModel.AppUtils.Delete_Client)) { <button id="btnDelete" type="button" class="btn btn-danger btn-sm padding" data-placement="top" data-toggle="modal" data-target="#popModalForDeletePermently"> <span class="glyphicon glyphicon-remove"></span> </button> }'
                    "data": 'StatusNextMonthID'*@
                    "data": ""
                }]
            });

        /// Following code is for filter input to apply filter only on Enter
        var itm = $("#tblClientUnpaidBill_filter input");
        itm.unbind();
        itm.keyup(function (e) {
            //enter or tab



            makeEmptyForSendingSMS();
            ShowOrHideSMSDiv();
            $("input:checkbox").prop("checked", false);

          //  if (e.keyCode == 13) {
            table.search(this.value).draw();
            //}
        });

        $('#popsConnectionDate').datepicker({
            dateFormat: 'mm/dd/yy',
            numberOfMonths: 1,
            changeMonth: true,
            changeYear: true
        });
        //$('#popsBillPaymentDate').datepicker({
        //    dateFormat: 'mm/dd/yy',
        //    numberOfMonths: 1,
        //    changeMonth: true,
        //    changeYear: true
        //});


        $("#PopUpClientUpdate").on("click", "#btnUpdateClientDetails", function () {

            if (ClientUpdateManager.UpdateClientDetailsValidation() === true) {
                @if ((bool)HttpContext.Current.Session["MikrotikOptionEnable"])
                {
                    <text>

                        console.log($("#lstMikrotik").val());
                        if ($("#lstMikrotik").val() === '' || $("#lstMikrotik").val() === null) {
                            AppUtil.ShowSuccess("Please Insert Mikrotik Information.");
                            return false;
                        }
                        //if (AppUtil.GetIdValue("IP") === '') {
                        //    AppUtil.ShowSuccess("Please Insert IP.");
                        //    return false;
                        //}
                        //if (AppUtil.GetIdValue("Mac") === '') {
                        //    AppUtil.ShowSuccess("Please Insert Mac.");
                        //    return false;
                        //}
                    </text>
                  // <script></script>

                }
                ClientUpdateManager.UpdateClientDetails();
            }

        });

        $("#chkPackageFromRunningMonth").change(function () {

            if ($(this).is(":checked")) {
                $("#chkStatusFromRunningMonth").prop("checked", false);
            }
        });

        $("#chkStatusFromRunningMonth").change(function () {

            if ($(this).is(":checked")) {
                $("#chkPackageFromRunningMonth").prop("checked", false);
            }
        });


        $("#btnCollectAdvancePayment").click(function () {
            UnpaidBillsManager.PayRunningMonthBillFromAdvanceAmount(@AppUtils.PamentIsOccouringFromAdvancePaymentUnpaidPage);
        });

        $("#btnGenerateBill").click(function () {
            UnpaidBillsManager.GenerateBillForThisMonth();
        });
        $("#btnShowBillPaymentWindow").click(function () {


            //AppUtil.ShowSuccess(T_ID);

            UnpaidBillsManager.GetClientPaymentAmountAndRemarksAndSleepNoForPayment(T_ID);
        });

        //$("#btnShowBillPaymentWindow").click(function () {

        //
        //    AppUtil.ShowSuccess(T_ID);
        //
        //    UnpaidBillsManager.GetClientPaymentAmountAndRemarksAndSleepNoForPayment(T_ID);
        //});
        $("#btnShowDueBillPaymentWindow").click(function () {
            $("#tblShowDueBillsList>tbody>tr").each(function () {

                var rowIndex = $(this).index();
                $("#tblShowDueBillsList>tbody>tr>td>input[name=chkPayDueBills]:radio").each(function () {
                    if ($(this).is(":checked")) {
                        $(this).closest("tr").css("border", "1px solid red");
                    }
                    else {
                        //$(this).attr("checked", false);
                        $(this).closest("tr").css("border", "0px solid red");
                    }
                });
            });

            //AppUtil.ShowSuccess(T_DuePayment_ID);

            UnpaidBillsManager.GetClientPaymentAmountAndRemarksAndSleepNoForDuePayment(T_DuePayment_ID);
        });
        //$("#btnAdjustDueBill").click(function () {
        //    UnpaidBillsManager.AdjustDueBill();
        //});
        $("#btnPayBill").click(function () {
            if (UnpaidBillsManager.PayResellerMonthlyBillValidation()) {
                UnpaidBillsManager.PayMonthlyBillForReseller(T_ID,@AppUtils.PamentIsOccouringFromUnpaidPage);
            }
        });
        $("#btnPayUnpaidBill").click(function () {
            if(UnpaidBillsManager.PayResellerDueBillValidation())
            {
                UnpaidBillsManager.PayDueBillForReseller(T_DuePayment_ID,@AppUtils.PamentIsOccouringFromUnpaidPage);
            }
        });


        $("#tblClientUnpaidBill").on('click', "#linkOfShowingDueAmount", function (e) {
            e.preventDefault();
            var transactionID = $(this).closest("tr").find("td:eq(3) input").val();
            UnpaidBillsManager.ShowDueBillDetailssByTransactionID(transactionID);
        });

        $("#mdlShowDueBillsList").on("click", "#chkPayDueBills", function () {

            var transactionID = $(this).closest("tr").find("td:eq(0) input").val();
            //AppUtil.ShowSuccess(transactionID);
        });

        //$('#BillPaymentDate').datepicker({
        //    dateFormat: 'mm/dd/yy',
        //    numberOfMonths: 1,
        //    changeMonth: true,
        //    changeYear: true
        //});

        $("#tblShowDueBillsList").on("change", "input[name=chkPayDueBills]:radio", function () {

            T_DuePayment_ID = $(this).closest("tr").find("td:eq(1) input").val();
            $("#btnShowDueBillPaymentWindow").css("visibility", "visible");
            //alert(T_DuePayment_ID);
        });


        $("#btnSearch").click(function () {
            if (UnpaidBillsManager.ValidationForUnPaidBillsSearch(byAdmin)) {
                makeEmptyForSendingSMS();
                ShowOrHideSMSDiv();
                //TransactionManager.GetBillsListBySearchCriteria();
                //UnpaidBillsManager.GetDueBillsListBySearchCriteria(byAdmin);
                table.draw();

            }
        });
        $("#btnUpnapiBill").click(function () {
            window.location.href = "/Transaction/UnpaidBills";
        });

        $("#tblClientUnpaidBill").DataTable();


        $("#btnNewSignUpBill").click(function () {
            window.location.href = "/Transaction/SignUpBills";
        });
        $("#btnExportExcel").click(function () {
            UnpaidBillsManager.PrintDueBillsList();
        });


        $("#btnBillPrint").click(function () {

            window.open("/Report/ShowUnpaidBillReport?ForAllOrSingle=1");
        });

        $("#tblClientUnpaidBill").on("click", "#btnPrint", function () {

            window.open("/Report/ShoBillReport?ForAllOrSingle=0&TransactionID=" + $(this).closest("tr").find("td:eq(1) input").val() + "");
            //TransactionManager.PrintAchiveBillIndividually();
        });

        $("#btnPopUpClientUpdateClose, #btnPopUpClose").click(function () {


            $("#chkStatusFromRunningMonth").prop("checked", false);
            $("#chkPackageFromRunningMonth").prop("checked", false);
            $("#tblEmployeeDetails").modal("hide");
            //ClientDetailsID = "";
            //ClientLineStatusID = "";
            //ClientBannedStatusID = "";
            //ClientTransactionID = "";
        });



        $("input[name='chkSendSMSForAll']").change(function (e) {


            isCheckAll = false;
            ifNotCheckAllThenCheckList = [];
            ifIsCheckAllThenNonCheckList = [];
            smsSendAry = [];
            if (this.checked) {
                // alert("success");
                isCheckAll = true;
                //$("input:checkbox").not(this).prop("checked",true);

                $('input[type = checkbox]').each(function () {

                    var id = this.id;
                    var aa = id.indexOf(strchksms);
                    if (aa >= 0) {

                        //  alert(id);
                        $('#tblClientUnpaidBill>tbody').find('tr').each(function () {

                            var row = $(this).index();
                            //tr: eq(' + index + ')').find("td:eq(3)")
                            var chkBoxHtml = $("#tblClientUnpaidBill>tbody>tr:eq(" + row + ")>td:eq(0)").html();
                            //  console.log(test);
                            var getID = $(chkBoxHtml).find('input').attr("id");
                            //  console.log(getID);
                            if (getID == id) {
                                var clnID = $("#tblClientUnpaidBill>tbody>tr:eq(" + row + ")").find("td:eq(2) input").val();
                                smsSendAry.push(clnID);
                            }
                        });

                    }
                });

                console.log("array:" + smsSendAry);
                $(smsSendAry).each(function (index, item) {
                    $("input[id='chkSMS" + item + "']").prop("checked", true);
                    //alert(item);
                });
            }
            else {
                isCheckAll = false;
                $("input:checkbox").prop("checked", false);
                // alert("false");
            }
            ShowOrHideSMSDiv();
        });

        function ShowOrHideSMSDiv() {

            var totalRecords = $("#tblClientUnpaidBill").DataTable().page.info().recordsTotal;

            if (isCheckAll && totalRecords > 0) {
                $("#SMSDiv").show();//prop("visible", true)
            }
            else if (ifNotCheckAllThenCheckList.length > 0) {
                $("#SMSDiv").show();
            }
            else {
                $("#SMSDiv").hide();
            }
            //var lnth = $("#tblUsers>tbody>tr").length;
            //if (isCheckAll && lnth > 0) {
            //    $("#SMSDiv").show();//prop("visible", true)
            //}
            //else if (ifNotCheckAllThenCheckList.length > 0) {
            //    $("#SMSDiv").show();
            //}
            //else {
            //    $("#SMSDiv").hide();
            //}
        }


        $("#btnSendMessage").click(function () {

            if (UnpaidBillsManager.SMSSendValidation()) {
                UnpaidBillsManager.SendMessageToClient(isCheckAll, ifIsCheckAllThenNonCheckList, ifNotCheckAllThenCheckList)
            }

        });
        $("#closeTblEmployeeDetails").click(function () {

            //ClientDetailsManager.ClearClientDetailsModalInformation();
            $("#chkStatusFromRunningMonth").prop("checked", false);
            $("#chkPackageFromRunningMonth").prop("checked", false);
            $("#Status").css("display", "none");
        });

        $('#PopsLineStatusActiveDate').datepicker({
            dateFormat: 'mm/dd/yy',
            numberOfMonths: 1,
            changeMonth: true,
            changeYear: true
        });

        $(document).on('click', '.checkGroup1', function () {

            if ($(this).prop("checked") == false) {
                $("#btnShowBillPaymentWindow").css("visibility", "hidden");
            }

            $('input.checkGroup1').not(this).prop('checked', false);

        });


        $('#btnPayBillClose,#clsCrossmdlMakePayment').click(function () {
            T_ID = "";
            $("#btnShowBillPaymentWindow").css("visibility", "hidden");

            $("#EmployeeID").prop("selectedIndex", 0);
            $("#txtTotalAmount").val("");
            $("#txtMoneyResetNo").val("");
            $("#Discount").val(0);
            $("#Total").val("");
            $("#Remarks").val("");
            $("#txtRegularBillPay").val("");
            $("input[name='chkBillPay']").prop('checked', false);
            //$(".chkBillPay").attr('checked',false);

            $("#mdlMakePayment").modal("hide");
        });

        $('#btnCrossmdlShowDueBillsList,#btnClosemdlShowDueBillsList').click(function () {
            T_DuePayment_ID = "";

            $("#popName").html("");
            $("#popLoginName").html("");
            $("#ClientZone").html("");
            $("#ClientAddress").html("");
            $("#ConnectionType").html("");
            $("#ContactNumber").html("");

            $("#tblShowDueBillsList>tbody>tr").remove();
            $("#btnShowDueBillPaymentWindow").css("visibility", "hidden");;

            $("#mdlShowDueBillsList").modal("hide");
        });


        $('#btnPayDueBillClose,#clsCrossmdlMakeDuePayment').click(function () {

            $("#txtDueTotalAmount").val("");
            $("#txtDueMoneyResetNo").val("");
            $("#txtDueDiscount").val(0);
            $("#txtDueTotal").val("");
            $("#txtDueRemarks").val("");
            $("#DueEmployeeID").prop("selectedIndex", 0);

            $("#mdlMakeDuePayment").modal("hide");
        });


        $("#ContactNumber").keyup(function () {
            var mob = $("#ContactNumber").val();
            $("#SMSCommunication").val(mob);
        });
    });
</script>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="panel panel-default">
        <div class="panel-heading">
            <section class="content-header">
                <h6 class="panel-title">Unpaid Bills</h6>
                <ol class="breadcrumb">
                    <li><a href="/Transaction/Accounts"><i class="fa fa-dashboard"></i> Archive Bills</a></li>
                    <li class="active"> <a href="/Transaction/UnpaidBills"> Unpaid Bills </a> </li>
                </ol>
            </section>
        </div>

        <div class="panel-body">
            @*@Html.Partial("Partial_Year_Month_Zone")*@

            <div class="col-sm-3">
                @Html.DropDownList("ResellerID", null, "-- Select Reseller --", new { @class = "form-control input-sm col-sm-11", @placeholder = " Select Reseller " })
            </div>
            <div class="col-md-3" style="padding-left: 0px;">
                @Html.DropDownList("SearchByZoneID", null, "  All Zone  ", new { @class = "form-control input-sm col-sm-11", @placeholder = " Year " })
            </div>
            <div class="col-md-3" style="padding-left: 0px;">
                @Html.DropDownList("YearID", null, "-- Select Year --", new { @class = "form-control input-sm col-sm-11", @placeholder = " Year " })
            </div>
            <div class="col-md-2" style="padding-left: 0px;">
                @Html.DropDownList("MonthID", null, "-- Select Month --", new { @class = "form-control input-sm col-sm-11", @placeholder = " Year " })
            </div>
            <div class="col-md-1" style="padding-left: 0px;">
                <input type="button" class="btn btn-primary btn-sm" id="btnSearch" value="Search" />
            </div>
        </div>
    </div>

    string Date = ISP_ManagementSystemModel.AppUtils.GetDateTimeNow().ToString("yyyy-MMM");

    <div class="panel panel-default">
        <div class="panel-heading col-sm-2">
            <h4 class="panel-title">Unpaid Bills : </h4>
        </div>
        <div class="col-sm-10" style="color: #333; background-color: #f5f5f5;border-color: #ddd;padding: 10px 15px; border-bottom: 1px solid transparent;"><div id="dateArchiveBills" style="font-weight: bold">@Date</div></div>

        @if (ISP_ManagementSystemModel.AppUtils.IsGranted(ISP_ManagementSystemModel.AppUtils.Pay__Bill_Reseller_Clients_By_Admin))
        {
            <input type="button" class="btn btn-primary btn-sm" id="btnShowBillPaymentWindow" style="visibility:hidden" value="Bill Pay" />
        }
        @if (ISP_ManagementSystemModel.AppUtils.IsGranted(ISP_ManagementSystemModel.AppUtils.Bill_Generate))
        {
            <input type="button" class="btn btn-primary btn-sm" id="btnGenerateBill" value="Generate Bill" />
        }
        @*@if (ISP_ManagementSystemModel.AppUtils.IsGranted(ISP_ManagementSystemModel.AppUtils.Adjust_Due_Bills))
            {
                <input type="button" class="btn btn-primary btn-sm" id="btnAdjustDueBill" value="Adjust Due Bill" />
            }*@
        @*@if (ISP_ManagementSystemModel.AppUtils.IsGranted(ISP_ManagementSystemModel.AppUtils.Add_Advance_Payment))
            {
                <input type="button" class="btn btn-primary btn-sm" id="btnCollectAdvancePayment" value="Collect Advance Payment" />
            }*@
        @if (ISP_ManagementSystemModel.AppUtils.IsGranted(ISP_ManagementSystemModel.AppUtils.View_Unpaid_Bills_List_Reseller_Clients_By_Admin))
        {
            <input type="button" class="btn btn-primary btn-sm" id="btnUpnapiBill" value="Unpaid Bill" />
        }
        @if (ISP_ManagementSystemModel.AppUtils.IsGranted(ISP_ManagementSystemModel.AppUtils.View_Sign_Up_Bills_List_Reseller_Clients_By_Admin))
        {
            <input type="button" class="btn btn-primary btn-sm" id="btnNewSignUpBill" value="New SIgnUp Bill" />
        }


        <input type="button" class="btn btn-primary btn-sm" id="btnBillPrint" value="Bill Print" />
        <input type="button" class="btn btn-primary btn-sm" id="btnExportExcel" value="Export Excel" />
        <div class="panel-body" style="overflow:auto">
            <table id="tblClientUnpaidBill" class="dTable table table-bordered table-hover table-responsive ">
                <thead>
                    <tr>
                        <th><div class='checkbox checkbox-danger'><input type="checkbox" id="chkSendSMSForAll" name="chkSendSMSForAll" /><label for='chkSendSMSForAll'> </label></div></th>
                        <th style="padding:0px;"></th>
                        <th hidden="hidden"></th>
                        <th hidden="hidden"></th>
                        <th style="padding: 0px;">Login_ID</th>
                        <th style="padding-left:100px;padding-right:100px;">Address</th>
                        <th style="">Mobile</th>
                        <th style="padding-left:45px; padding-right:45px;">Zone</th>
                        <th style="">Package</th>
                        <th style="">Fee</th>
                        @*Monthly_*@
                        <th style="">Paid Amount</th>
                        <th style="padding:10px;">Discount</th>
                        <th style="padding:10px;">Permanent Discount</th>
                        <th style="">Old_Due</th>
                        <th>Current Status</th>
                        <th style="">Paid_By</th>
                        <th style="">Collect_By</th>
                        <th style="">Paid_Time</th>
                        <th style="">Remarks</th>
                        <th style="">Receipt_No</th>
                        @*<th style="">Status_Activ_Date</th>*@
                        <th style="padding:15px;">Action</th>
                    </tr>
                </thead>

                @*<tbody>
                        @foreach (var item in Model)
                        {
                            /// foreach (var item in item)
                            {
                                <tr>
                                    @{
                                        string currentStatusonThisMonth = "";
                                        //string clientDueBills = item..ClientDueBills;
                                        //string resetNo1 = (item.Transaction.PaymentStatus == ISP_ManagementSystemModel.AppUtils.PaymentIsPaid) ? item.Transaction.ResetNo.ToString() : "---";
                                        //string resetNo = (item.Paid == true) ? item.ReceiptNo.ToString() : "---";
                                        //string paidAmount = (item.Paid == true) ? item.PaidAmount.ToString() : "---";
                                        //bool paid = (item.Paid == true) ? true : false;
                                        //bool employee = (item.Paid == true) ? true : false;
                                        if (item.StatusThisMonthID == ISP_ManagementSystemModel.AppUtils.LineIsActive)
                                        {
                                            currentStatusonThisMonth = "Active";
                                        }
                                        if (item.StatusThisMonthID == ISP_ManagementSystemModel.AppUtils.LineIsLock)
                                        {
                                            currentStatusonThisMonth = "Lock";
                                        }
                                    }

                                    @if (item.Paid == true)
                                    {
                                        <td width="0px">   </td>
                                    }
                                    else
                                    {
                                        <td width="0px">
                                            @Html.CheckBox("chkBillPay", new { @class = "checkGroup1", @onclick = "setCompleteStatus(" + item.TransactionID + ")" })
                                        </td>
                                    }

                                    <td hidden="hidden"><input type="hidden" id="TransactionID" name="TransactionID" value="@item.TransactionID" /></td>
                                    <td><a href="#" onclick="GetClientDetailsByClientDetailsID(@item.ClientDetailsID,@item.TransactionID)">@item.ClientName</a></td>
                                    <td>@item.Address</td>
                                    <td>@item.ContactNumber</td>
                                    <td>@item.ZoneName</td>
                                    <td>@item.PackageName</td>
                                    <td>@System.Math.Round(item.FeeForThisMonth, 2)</td>

                                    <td>@item.PaidAmount</td>
                                    @if (item.Due > 0)
                                    {

                                        <td><a href="" id="linkOfShowingDueAmount">@item.Due</a></td>

                                    }
                                    else
                                    {
                                        <td style="color:blue">0</td>
                                    }

                                    <td>@currentStatusonThisMonth</td>
                                    <td> @item.Employeename </td>
                                    <td> @item.Employeename </td>
                                    <td>@item.PaidTime</td>
                                    <td>@item.RemarksNo</td>
                                    <td>@item.ReceiptNo</td>

                                    <td align="center" style="padding: 8px 3px;">
                                        <div style="float:left">
                                            <button type="button" id="btnPrint" class="btn btn-success  btn-sm"><span class="glyphicon glyphicon-print"></span></button>
                                        </div>
                                        @if (item.Paid == true)
                                        {
                                            <div style="float:right">
                                                <button type="button" id="" class="btn btn-success  btn-sm" title="Paid"><span class="glyphicon glyphicon-ok"></span></button>
                                            </div>
                                        }
                                        else
                                        {
                                            <div style="float:right">
                                                <button type="button" id="" class="btn btn-danger btn-sm" title="Not Paid"><span class="glyphicon glyphicon-remove"></span></button>
                                            </div>
                                        }
                                    </td>

                                </tr>
                                            }
                                        }
                        @foreach (var transaction in Model.lstTransaction)
                            {
                                <tr>
                                    @{
                                string resetNo = (transaction.PaymentStatus == ISP_ManagementSystemModel.AppUtils.PaymentTypeIsConnection) ? transaction.ResetNo.ToString() : "---";
                                string paidAmount = (transaction.PaymentStatus == ISP_ManagementSystemModel.AppUtils.PaymentTypeIsConnection) ? transaction.PaymentAmount.ToString() : "---";
                                bool paid = (transaction.PaymentStatus == ISP_ManagementSystemModel.AppUtils.PaymentTypeIsConnection) ? true : false;
                                    }

                                    @if (paid == true)
                                    {
                                        <td>   </td>
                                    }
                                    else
                                    {
                                        <td>
                                            @Html.CheckBox("chkBillPay", new { @class = "checkGroup1", @onclick = "setCompleteStatus(" + transaction.TransactionID + ")" })
                                        </td>
                                    }

                                    <td>@Html.HiddenFor(s => transaction.TransactionID)</td>
                                    <td>@Html.DisplayFor(s => transaction.ClientDetails.LoginName)</td>
                                    <td>@Html.DisplayFor(s => transaction.ClientDetails.Address)</td>
                                    <td>@Html.DisplayFor(s => transaction.ClientDetails.ContactNumber)</td>
                                    <td>@Html.DisplayFor(s => transaction.ClientDetails.Zone.ZoneName)</td>
                                    <td>@Html.DisplayFor(s => transaction.ClientDetails.Package.PackageName)</td>
                                    <td>@Html.DisplayFor(s => transaction.Package.PackagePrice)</td>

                                    <td>@Html.DisplayFor(s => transaction.PaymentAmount)</td>
                                    <td></td>
                                    <td>@Html.DisplayFor(s => transaction.Employee.Name)</td>
                                    <td>@Html.DisplayFor(s => transaction.Employee.Name)</td>
                                    <td>@Html.DisplayFor(s => transaction.PaymentDate)</td>
                                    <td>@Html.DisplayFor(s => transaction.RemarksNo)</td>



                                    <td>@resetNo</td>

                                    <td>
                                        <div style="width: 30%; float: left">
                                            <button type="button" id="btnEdit" class="btn btn-success btn-block" style="width: 40px;"><span class="glyphicon glyphicon-ok"></span></button>
                                        </div>
                                        <div style="width: 30%; float: left">
                                            <button type="button" id="btnDelete" class="btn btn-danger btn-block" style="width: 40px;"><span class="glyphicon glyphicon-remove"></span></button>
                                        </div>
                                    </td>

                                </tr>
                            }
                    </tbody>*@

            </table>
        </div>
    </div>

    <div class="modal fade" id="mdlShowDueBillsList" role="dialog" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog modal-lg" style="width:90%">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" id="btnCrossmdlShowDueBillsList" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Due Bills</h4>
                </div>
                <div class="modal-body panel-body">
                    @Html.Partial("Partial_ShowDueBillsList")
                </div>
                <div class="modal-footer">
                    @*<button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>*@
                    <div id="PopUp" style="float:right">
                        <input type="button" id="btnClosemdlShowDueBillsList" value="Close" class="btn btn-default btn-sm" data-dismiss="modal" />
                        @* <input type="button" id="btnPayUnpaidBill" value="Yes" class="btn btn-primary btn-sm" />*@
                    </div>
                </div>
            </div>
        </div>
    </div>

    if (ISP_ManagementSystemModel.AppUtils.IsGranted(ISP_ManagementSystemModel.AppUtils.Pay__Bill_Reseller_Clients_By_Admin))
    {
        <div class="modal fade" id="mdlMakePayment" data-backdrop="static" data-keyboard="false">
            <div class="modal-dialog modal-lg" style="width:65%">
                <div class="modal-content">
                    <div class="modal-header">
                        <button id="clsCrossmdlMakePayment" type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Do You want to pay for this client?</h4>
                    </div>
                    <div class="modal-body panel-body">
                        @Html.Partial("Partial_Reseller_Payment")
                    </div>
                    <div class="modal-footer">
                        @*<button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>*@
                        <div id="PopUp" style="float:right">
                            <input type="button" id="btnPayBillClose" value="No" class="btn btn-default btn-sm" />
                            <input type="button" id="btnPayBill" value="Yes" class="btn btn-primary btn-sm" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    if (ISP_ManagementSystemModel.AppUtils.IsGranted(ISP_ManagementSystemModel.AppUtils.Pay_Due_Bill_By_Admin_For_Reseller))
    {
        <div class="modal fade" id="mdlMakeDuePayment" data-backdrop="static" data-keyboard="false">
            <div class="modal-dialog modal-lg" style="width:65%">
                <div class="modal-content">
                    <div class="modal-header">
                        <button id="clsCrossmdlMakeDuePayment" type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Do You want to pay for this client?</h4>
                    </div>
                    <div class="modal-body panel-body">
                        @Html.Partial("Partial_Reseller_Due_Payment")
                    </div>
                    <div class="modal-footer">
                        <div id="PopUp" style="float: right">

                            <button type="button" id="btnPayDueBillClose" class="btn btn-primary btn-sm" data-dismiss="modal">No</button>
                            @*<input type="button" id="" value="No" class="btn btn-default btn-sm"/>*@
                            <input type="button" id="btnPayUnpaidBill" value="Yes" class="btn btn-primary btn-sm" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @Html.Partial("SMSSendDiv")

    <div class="panel panel-default" style="margin-bottom: 0px">
        <div class="panel-heading col-sm-2">
            <h4 class="panel-title">Archive Bills Summary:</h4>
        </div>
        <div class="col-sm-10" style="color: #333; background-color: #f5f5f5;border-color: #ddd;padding: 10px 15px; border-bottom: 1px solid transparent;"><div id="dateBillSummary" style="font-weight: bold">@Date</div></div>
        <div class="panel-body">
            @Html.Partial("ClientBillSummary")
        </div>
    </div>

    <div class="modal fade" id="tblEmployeeDetails" role="dialog" style="overflow: hidden; overflow-y: scroll;" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog modal-lg" style="width: 65%;margin-bottom:5px;">
            <div class="modal-content">
                <div class="modal-header">
                    <button id="closeTblEmployeeDetails" type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Update Client Information</h4>
                </div>
                <div class="modal-body panel-body">
                    @Html.Partial("Partial_SpecificCLientDetails")
                </div>

                @if ((bool)HttpContext.Current.Session["MikrotikOptionEnable"])
                {
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <h6 class="panel-title">Mikrotik</h6>
                        </div>

                        <div class="panel-body">
                            <div class="form-group col-sm-1"></div>
                            <div class="form-group col-sm-6">
                                <div>
                                    @Html.Label("MIkrotik", new { @class = "control-label col-md-0", Style = "float:left" })
                                    <span class="required_field col-md-0" style="padding-left: 5px"> *</span>
                                </div>
                                <div style="clear: both"> </div>
                                <div class="col-md-11" style="padding-left: 0px;">
                                    @Html.DropDownList("lstMikrotik", null, "--Select Mikrotik--", new { @class = "form-control input-sm col-sm-11", @placeholder = " Select Mikrotik " })
                                </div>
                            </div>
                            <div class="form-group col-sm-5">
                                <div>
                                    @Html.Label("IP", new { @class = "control-label col-md-0", Style = "float:left" })
                                    @*<span class="required_field col-md-0" style="padding-left: 5px"> *</span>*@
                                </div>
                                <div style="clear: both"> </div>
                                <div class="col-md-11" style="padding-left: 0px;">
                                    @Html.TextBox("IP", null, new { @class = "form-control input-sm col-sm-11", @placeholder = " 131.33.14.35 " })
                                </div>
                            </div>
                            <div class="form-group col-sm-1"></div>
                            <div class="form-group col-sm-6">
                                <div>
                                    @Html.Label("Mac", new { @class = "control-label col-md-0", Style = "float:left" })
                                    @*<span class="required_field col-md-0" style="padding-left: 5px"> *</span>*@
                                </div>
                                <div style="clear: both"> </div>
                                <div class="col-md-11" style="padding-left: 0px;">
                                    @Html.TextBox("Mac", null, new { @class = "form-control input-sm col-sm-11", @placeholder = " 01:1e:ed:34:45:89 " })
                                </div>
                            </div>
                        </div>

                    </div>
                }
                <div class="modal-footer">
                    @*<button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>*@
                    <div id="PopUpClientUpdate" style="float: right">
                        <input type="button" id="btnPopUpClientUpdateClose" value="Close" class="btn btn-default btn-sm" />
                        @if (ISP_ManagementSystemModel.AppUtils.IsGranted(ISP_ManagementSystemModel.AppUtils.Update_Client_For_Reseller_By_Admin))
                        {
                            <input type="button" id="btnUpdateClientDetails" value="Update Client Information" class="btn btn-primary btn-sm" />
                        }

                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="popModalForDeletePermently" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    Confirm Submit
                </div>
                <div class="modal-body">
                    Are you sure you want to Delete This Employee Permently?
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                    <a href="#" id="btnEmployeeDeletePermently" class="btn btn-success success">Delete Employee</a>
                </div>
            </div>
        </div>
    </div>
}















